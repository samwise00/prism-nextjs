"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[429],{35796:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.d(__webpack_exports__,{d:function(){return BaseEvmAdapter}});var _web3auth_base__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(45624);class BaseEvmAdapter extends _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.J5{async authenticateUser(){var _this$chainConfig;if(!this.provider||!(null!==(_this$chainConfig=this.chainConfig)&&void 0!==_this$chainConfig&&_this$chainConfig.chainId))throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.RM.notConnectedError();let{chainNamespace,chainId}=this.chainConfig;if(this.status!==_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.MP.CONNECTED)throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.RM.notConnectedError("Not connected with wallet, Please login/connect first");let accounts=await this.provider.request({method:"eth_accounts"});if(accounts&&accounts.length>0){let existingToken=(0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.Cb)(accounts[0],this.name);if(existingToken){let isExpired=(0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.$E)(existingToken);if(!isExpired)return{idToken:existingToken}}let payload={domain:window.location.origin,uri:window.location.href,address:accounts[0],chainId:parseInt(chainId,16),version:"1",nonce:Math.random().toString(36).slice(2),issuedAt:new Date().toISOString()},challenge=await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.tV)(payload,chainNamespace),signedMessage=await this.provider.request({method:"personal_sign",params:[challenge,accounts[0]]}),idToken=await (0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.rn)(chainNamespace,signedMessage,challenge,this.name,this.sessionTime);return(0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.Fr)(accounts[0],this.name,idToken),{idToken}}throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.RM.notConnectedError("Not connected with wallet, Please login/connect first")}async disconnect(){if(this.status!==_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.MP.CONNECTED)throw _web3auth_base__WEBPACK_IMPORTED_MODULE_0__.RM.disconnectionError("Not connected with wallet");let accounts=await this.provider.request({method:"eth_accounts"});accounts&&accounts.length>0&&(0,_web3auth_base__WEBPACK_IMPORTED_MODULE_0__.qz)(accounts[0],this.name)}}},94429:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{MetamaskAdapter:function(){return MetamaskAdapter}});var _babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(4942),_metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(92003),_metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(_metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0__),_web3auth_base__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(45624),_web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(35796);class MetamaskAdapter extends _web3auth_base_evm_adapter__WEBPACK_IMPORTED_MODULE_2__.d{constructor(){let adapterOptions=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};super(),(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.Z)(this,"adapterNamespace",_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.yk.EIP155),(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.Z)(this,"currentChainNamespace",_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.EN.EIP155),(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.Z)(this,"type",_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.hN.EXTERNAL),(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.Z)(this,"name",_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.rW.METAMASK),(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.Z)(this,"status",_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.NOT_READY),(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.Z)(this,"rehydrated",!1),(0,_babel_runtime_helpers_defineProperty__WEBPACK_IMPORTED_MODULE_3__.Z)(this,"metamaskProvider",null),this.chainConfig=adapterOptions.chainConfig||null,this.sessionTime=adapterOptions.sessionTime||86400}get provider(){return this.status===_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.CONNECTED&&this.metamaskProvider?this.metamaskProvider:null}set provider(_){throw Error("Not implemented")}async init(options){if(super.checkInitializationRequirements(),this.metamaskProvider=await _metamask_detect_provider__WEBPACK_IMPORTED_MODULE_0___default()({mustBeMetaMask:!0}),!this.metamaskProvider)throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.Ty.notInstalled("Metamask extension is not installed");this.status=_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.READY,this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.n2.READY,_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.rW.METAMASK);try{_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.cM.debug("initializing metamask adapter"),options.autoConnect&&(this.rehydrated=!0,await this.connect())}catch(error){this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.n2.ERRORED,error)}}setAdapterSettings(options){this.status!==_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.READY&&null!=options&&options.sessionTime&&(this.sessionTime=options.sessionTime)}async connect(){if(super.checkConnectionRequirements(),this.chainConfig||(this.chainConfig=(0,_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.h2)(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.EN.EIP155,1)),this.status=_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.CONNECTING,this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.n2.CONNECTING,{adapter:_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.rW.METAMASK}),!this.metamaskProvider)throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.RM.notConnectedError("Not able to connect with metamask");try{await this.metamaskProvider.request({method:"eth_requestAccounts"});let{chainId}=this.metamaskProvider;if(chainId!==this.chainConfig.chainId&&await this.switchChain(this.chainConfig),this.status=_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.CONNECTED,!this.provider)throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.RM.notConnectedError("Failed to connect with provider");return this.provider.once("disconnect",()=>{this.disconnect()}),this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.n2.CONNECTED,{adapter:_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.rW.METAMASK,reconnected:this.rehydrated}),this.provider}catch(error){throw this.status=_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.READY,this.rehydrated=!1,this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.n2.ERRORED,error),_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.RM.connectionError("Failed to login with metamask wallet")}}async disconnect(){var _this$provider;let options=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{cleanup:!1};await super.disconnect(),null===(_this$provider=this.provider)||void 0===_this$provider||_this$provider.removeAllListeners(),options.cleanup?(this.status=_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.NOT_READY,this.metamaskProvider=null):this.status=_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.READY,this.rehydrated=!1,this.emit(_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.n2.DISCONNECTED)}async getUserInfo(){if(this.status!==_web3auth_base__WEBPACK_IMPORTED_MODULE_1__.MP.CONNECTED)throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.RM.notConnectedError("Not connected with wallet, Please login/connect first");return{}}async switchChain(chainConfig){if(!this.metamaskProvider)throw _web3auth_base__WEBPACK_IMPORTED_MODULE_1__.RM.notConnectedError("Not connected with wallet");try{await this.metamaskProvider.request({method:"wallet_switchEthereumChain",params:[{chainId:chainConfig.chainId}]})}catch(switchError){if(4902===switchError.code)await this.metamaskProvider.request({method:"wallet_addEthereumChain",params:[{chainId:chainConfig.chainId,chainName:chainConfig.displayName,rpcUrls:[chainConfig.rpcTarget]}]});else throw switchError}}}}}]);