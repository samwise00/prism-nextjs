"use strict";(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[766],{59917:function(__unused_webpack_module,__webpack_exports__,__webpack_require__){let _Symbol$toStringTag,TransactionStatus;__webpack_require__.d(__webpack_exports__,{RG:function(){return Keypair},ew:function(){return Connection},nh:function(){return PublicKey}});var TransactionStatus1,buffer__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(48764),_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(74736),_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(15866),bn_js__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(13384),bn_js__WEBPACK_IMPORTED_MODULE_3___default=__webpack_require__.n(bn_js__WEBPACK_IMPORTED_MODULE_3__),bs58__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(10011),bs58__WEBPACK_IMPORTED_MODULE_4___default=__webpack_require__.n(bs58__WEBPACK_IMPORTED_MODULE_4__),_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(17748),borsh__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(25532),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(39386),bigint_buffer__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(40475),superstruct__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(53471),rpc_websockets__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(44115),jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(31198),jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_10___default=__webpack_require__.n(jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_10__),_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(85609),_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(9905),_noble_secp256k1__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(27760);_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.P6.sha512Sync=(...m)=>(0,_noble_hashes_sha512__WEBPACK_IMPORTED_MODULE_1__.o)(_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.P6.concatBytes(...m)),_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.P6.randomPrivateKey;let generateKeypair=()=>{let privateScalar=_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.P6.randomPrivateKey(),publicKey=getPublicKey(privateScalar),secretKey=new Uint8Array(64);return secretKey.set(privateScalar),secretKey.set(publicKey,32),{publicKey,secretKey}},getPublicKey=_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.Z_.getPublicKey;function isOnCurve(publicKey){try{return _noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.E9.fromHex(publicKey,!0),!0}catch{return!1}}let sign=(message,secretKey)=>_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.Z_.sign(message,secretKey.slice(0,32)),verify=_noble_ed25519__WEBPACK_IMPORTED_MODULE_2__.Z_.verify,toBuffer=arr=>buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.isBuffer(arr)?arr:arr instanceof Uint8Array?buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(arr.buffer,arr.byteOffset,arr.byteLength):buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(arr);class Struct{constructor(properties){Object.assign(this,properties)}encode(){return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from((0,borsh__WEBPACK_IMPORTED_MODULE_6__.serialize)(SOLANA_SCHEMA,this))}static decode(data){return(0,borsh__WEBPACK_IMPORTED_MODULE_6__.deserialize)(SOLANA_SCHEMA,this,data)}static decodeUnchecked(data){return(0,borsh__WEBPACK_IMPORTED_MODULE_6__.deserializeUnchecked)(SOLANA_SCHEMA,this,data)}}let SOLANA_SCHEMA=new Map,uniquePublicKeyCounter=1;_Symbol$toStringTag=Symbol.toStringTag;class PublicKey extends Struct{constructor(value){if(super({}),this._bn=void 0,void 0!==value._bn)this._bn=value._bn;else{if("string"==typeof value){let decoded=bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(value);if(32!=decoded.length)throw Error("Invalid public key input");this._bn=new(bn_js__WEBPACK_IMPORTED_MODULE_3___default())(decoded)}else this._bn=new(bn_js__WEBPACK_IMPORTED_MODULE_3___default())(value);if(this._bn.byteLength()>32)throw Error("Invalid public key input")}}static unique(){let key=new PublicKey(uniquePublicKeyCounter);return uniquePublicKeyCounter+=1,new PublicKey(key.toBuffer())}equals(publicKey){return this._bn.eq(publicKey._bn)}toBase58(){return bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(this.toBytes())}toJSON(){return this.toBase58()}toBytes(){let buf=this.toBuffer();return new Uint8Array(buf.buffer,buf.byteOffset,buf.byteLength)}toBuffer(){let b=this._bn.toArrayLike(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer);if(32===b.length)return b;let zeroPad=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(32);return b.copy(zeroPad,32-b.length),zeroPad}get[_Symbol$toStringTag](){return`PublicKey(${this.toString()})`}toString(){return this.toBase58()}static async createWithSeed(fromPublicKey,seed,programId){let buffer=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([fromPublicKey.toBuffer(),buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(seed),programId.toBuffer()]),publicKeyBytes=(0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__.J)(buffer);return new PublicKey(publicKeyBytes)}static createProgramAddressSync(seeds,programId){let buffer=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(0);seeds.forEach(function(seed){if(seed.length>32)throw TypeError("Max seed length exceeded");buffer=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([buffer,toBuffer(seed)])}),buffer=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.concat([buffer,programId.toBuffer(),buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from("ProgramDerivedAddress")]);let publicKeyBytes=(0,_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__.J)(buffer);if(isOnCurve(publicKeyBytes))throw Error("Invalid seeds, address must fall off the curve");return new PublicKey(publicKeyBytes)}static async createProgramAddress(seeds,programId){return this.createProgramAddressSync(seeds,programId)}static findProgramAddressSync(seeds,programId){let address,nonce=255;for(;0!=nonce;){try{let seedsWithNonce=seeds.concat(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([nonce]));address=this.createProgramAddressSync(seedsWithNonce,programId)}catch(err){if(err instanceof TypeError)throw err;nonce--;continue}return[address,nonce]}throw Error("Unable to find a viable program address nonce")}static async findProgramAddress(seeds,programId){return this.findProgramAddressSync(seeds,programId)}static isOnCurve(pubkeyData){let pubkey=new PublicKey(pubkeyData);return isOnCurve(pubkey.toBytes())}}PublicKey.default=new PublicKey("11111111111111111111111111111111"),SOLANA_SCHEMA.set(PublicKey,{kind:"struct",fields:[["_bn","u256"]]}),new PublicKey("BPFLoader1111111111111111111111111111111111");class TransactionExpiredBlockheightExceededError extends Error{constructor(signature){super(`Signature ${signature} has expired: block height exceeded.`),this.signature=void 0,this.signature=signature}}Object.defineProperty(TransactionExpiredBlockheightExceededError.prototype,"name",{value:"TransactionExpiredBlockheightExceededError"});class TransactionExpiredTimeoutError extends Error{constructor(signature,timeoutSeconds){super(`Transaction was not confirmed in ${timeoutSeconds.toFixed(2)} seconds. It is unknown if it succeeded or failed. Check signature ${signature} using the Solana Explorer or CLI tools.`),this.signature=void 0,this.signature=signature}}Object.defineProperty(TransactionExpiredTimeoutError.prototype,"name",{value:"TransactionExpiredTimeoutError"});class TransactionExpiredNonceInvalidError extends Error{constructor(signature){super(`Signature ${signature} has expired: the nonce is no longer valid.`),this.signature=void 0,this.signature=signature}}Object.defineProperty(TransactionExpiredNonceInvalidError.prototype,"name",{value:"TransactionExpiredNonceInvalidError"});class MessageAccountKeys{constructor(staticAccountKeys,accountKeysFromLookups){this.staticAccountKeys=void 0,this.accountKeysFromLookups=void 0,this.staticAccountKeys=staticAccountKeys,this.accountKeysFromLookups=accountKeysFromLookups}keySegments(){let keySegments=[this.staticAccountKeys];return this.accountKeysFromLookups&&(keySegments.push(this.accountKeysFromLookups.writable),keySegments.push(this.accountKeysFromLookups.readonly)),keySegments}get(index){for(let keySegment of this.keySegments()){if(index<keySegment.length)return keySegment[index];index-=keySegment.length}}get length(){return this.keySegments().flat().length}compileInstructions(instructions){if(this.length>256)throw Error("Account index overflow encountered during compilation");let keyIndexMap=new Map;this.keySegments().flat().forEach((key,index)=>{keyIndexMap.set(key.toBase58(),index)});let findKeyIndex=key=>{let keyIndex=keyIndexMap.get(key.toBase58());if(void 0===keyIndex)throw Error("Encountered an unknown instruction account key during compilation");return keyIndex};return instructions.map(instruction=>({programIdIndex:findKeyIndex(instruction.programId),accountKeyIndexes:instruction.keys.map(meta=>findKeyIndex(meta.pubkey)),data:instruction.data}))}}let publicKey=(property="publicKey")=>_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(32,property),rustString=(property="string")=>{let rsl=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("length"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("lengthPadding"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.cv(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq(),-8),"chars")],property),_decode=rsl.decode.bind(rsl),_encode=rsl.encode.bind(rsl),rslShim=rsl;return rslShim.decode=(b,offset)=>{let data=_decode(b,offset);return data.chars.toString()},rslShim.encode=(str,b,offset)=>{let data={chars:buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(str,"utf8")};return _encode(data,b,offset)},rslShim.alloc=str=>_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq().span+_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq().span+buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(str,"utf8").length,rslShim};function decodeLength(bytes){let len=0,size=0;for(;;){let elem=bytes.shift();if(len|=(127&elem)<<7*size,size+=1,(128&elem)==0)break}return len}function encodeLength(bytes,len){let rem_len=len;for(;;){let elem=127&rem_len;if(0==(rem_len>>=7)){bytes.push(elem);break}elem|=128,bytes.push(elem)}}function assert(condition,message){if(!condition)throw Error(message||"Assertion failed")}class CompiledKeys{constructor(payer,keyMetaMap){this.payer=void 0,this.keyMetaMap=void 0,this.payer=payer,this.keyMetaMap=keyMetaMap}static compile(instructions,payer){let keyMetaMap=new Map,getOrInsertDefault=pubkey=>{let address=pubkey.toBase58(),keyMeta=keyMetaMap.get(address);return void 0===keyMeta&&(keyMeta={isSigner:!1,isWritable:!1,isInvoked:!1},keyMetaMap.set(address,keyMeta)),keyMeta},payerKeyMeta=getOrInsertDefault(payer);for(let ix of(payerKeyMeta.isSigner=!0,payerKeyMeta.isWritable=!0,instructions))for(let accountMeta of(getOrInsertDefault(ix.programId).isInvoked=!0,ix.keys)){let keyMeta=getOrInsertDefault(accountMeta.pubkey);keyMeta.isSigner||(keyMeta.isSigner=accountMeta.isSigner),keyMeta.isWritable||(keyMeta.isWritable=accountMeta.isWritable)}return new CompiledKeys(payer,keyMetaMap)}getMessageComponents(){let mapEntries=[...this.keyMetaMap.entries()];assert(mapEntries.length<=256,"Max static account keys length exceeded");let writableSigners=mapEntries.filter(([,meta])=>meta.isSigner&&meta.isWritable),readonlySigners=mapEntries.filter(([,meta])=>meta.isSigner&&!meta.isWritable),writableNonSigners=mapEntries.filter(([,meta])=>!meta.isSigner&&meta.isWritable),readonlyNonSigners=mapEntries.filter(([,meta])=>!meta.isSigner&&!meta.isWritable),header={numRequiredSignatures:writableSigners.length+readonlySigners.length,numReadonlySignedAccounts:readonlySigners.length,numReadonlyUnsignedAccounts:readonlyNonSigners.length};{assert(writableSigners.length>0,"Expected at least one writable signer key");let[payerAddress]=writableSigners[0];assert(payerAddress===this.payer.toBase58(),"Expected first writable signer key to be the fee payer")}let staticAccountKeys=[...writableSigners.map(([address])=>new PublicKey(address)),...readonlySigners.map(([address])=>new PublicKey(address)),...writableNonSigners.map(([address])=>new PublicKey(address)),...readonlyNonSigners.map(([address])=>new PublicKey(address))];return[header,staticAccountKeys]}extractTableLookup(lookupTable){let[writableIndexes,drainedWritableKeys]=this.drainKeysFoundInLookupTable(lookupTable.state.addresses,keyMeta=>!keyMeta.isSigner&&!keyMeta.isInvoked&&keyMeta.isWritable),[readonlyIndexes,drainedReadonlyKeys]=this.drainKeysFoundInLookupTable(lookupTable.state.addresses,keyMeta=>!keyMeta.isSigner&&!keyMeta.isInvoked&&!keyMeta.isWritable);if(0!==writableIndexes.length||0!==readonlyIndexes.length)return[{accountKey:lookupTable.key,writableIndexes,readonlyIndexes},{writable:drainedWritableKeys,readonly:drainedReadonlyKeys}]}drainKeysFoundInLookupTable(lookupTableEntries,keyMetaFilter){let lookupTableIndexes=[],drainedKeys=[];for(let[address,keyMeta]of this.keyMetaMap.entries())if(keyMetaFilter(keyMeta)){let key=new PublicKey(address),lookupTableIndex=lookupTableEntries.findIndex(entry=>entry.equals(key));lookupTableIndex>=0&&(assert(lookupTableIndex<256,"Max lookup table index exceeded"),lookupTableIndexes.push(lookupTableIndex),drainedKeys.push(key),this.keyMetaMap.delete(address))}return[lookupTableIndexes,drainedKeys]}}class Message{constructor(args){this.header=void 0,this.accountKeys=void 0,this.recentBlockhash=void 0,this.instructions=void 0,this.indexToProgramIds=new Map,this.header=args.header,this.accountKeys=args.accountKeys.map(account=>new PublicKey(account)),this.recentBlockhash=args.recentBlockhash,this.instructions=args.instructions,this.instructions.forEach(ix=>this.indexToProgramIds.set(ix.programIdIndex,this.accountKeys[ix.programIdIndex]))}get version(){return"legacy"}get staticAccountKeys(){return this.accountKeys}get compiledInstructions(){return this.instructions.map(ix=>({programIdIndex:ix.programIdIndex,accountKeyIndexes:ix.accounts,data:bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(ix.data)}))}get addressTableLookups(){return[]}getAccountKeys(){return new MessageAccountKeys(this.staticAccountKeys)}static compile(args){let compiledKeys=CompiledKeys.compile(args.instructions,args.payerKey),[header,staticAccountKeys]=compiledKeys.getMessageComponents(),accountKeys=new MessageAccountKeys(staticAccountKeys),instructions=accountKeys.compileInstructions(args.instructions).map(ix=>({programIdIndex:ix.programIdIndex,accounts:ix.accountKeyIndexes,data:bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(ix.data)}));return new Message({header,accountKeys:staticAccountKeys,recentBlockhash:args.recentBlockhash,instructions})}isAccountSigner(index){return index<this.header.numRequiredSignatures}isAccountWritable(index){let numSignedAccounts=this.header.numRequiredSignatures;if(index>=this.header.numRequiredSignatures){let numUnsignedAccounts=this.accountKeys.length-numSignedAccounts,numWritableUnsignedAccounts=numUnsignedAccounts-this.header.numReadonlyUnsignedAccounts;return index-numSignedAccounts<numWritableUnsignedAccounts}{let numWritableSignedAccounts=numSignedAccounts-this.header.numReadonlySignedAccounts;return index<numWritableSignedAccounts}}isProgramId(index){return this.indexToProgramIds.has(index)}programIds(){return[...this.indexToProgramIds.values()]}nonProgramIds(){return this.accountKeys.filter((_,index)=>!this.isProgramId(index))}serialize(){let numKeys=this.accountKeys.length,keyCount=[];encodeLength(keyCount,numKeys);let instructions=this.instructions.map(instruction=>{let{accounts,programIdIndex}=instruction,data=Array.from(bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(instruction.data)),keyIndicesCount=[];encodeLength(keyIndicesCount,accounts.length);let dataCount=[];return encodeLength(dataCount,data.length),{programIdIndex,keyIndicesCount:buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(keyIndicesCount),keyIndices:accounts,dataLength:buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(dataCount),data}}),instructionCount=[];encodeLength(instructionCount,instructions.length);let instructionBuffer=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(1232);buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(instructionCount).copy(instructionBuffer);let instructionBufferLength=instructionCount.length;instructions.forEach(instruction=>{let instructionLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("programIdIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(instruction.keyIndicesCount.length,"keyIndicesCount"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("keyIndex"),instruction.keyIndices.length,"keyIndices"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(instruction.dataLength.length,"dataLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("userdatum"),instruction.data.length,"data")]),length=instructionLayout.encode(instruction,instructionBuffer,instructionBufferLength);instructionBufferLength+=length}),instructionBuffer=instructionBuffer.slice(0,instructionBufferLength);let signDataLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(1,"numRequiredSignatures"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(1,"numReadonlySignedAccounts"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(1,"numReadonlyUnsignedAccounts"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(keyCount.length,"keyCount"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(publicKey("key"),numKeys,"keys"),publicKey("recentBlockhash")]),transaction={numRequiredSignatures:buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([this.header.numRequiredSignatures]),numReadonlySignedAccounts:buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([this.header.numReadonlySignedAccounts]),numReadonlyUnsignedAccounts:buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from([this.header.numReadonlyUnsignedAccounts]),keyCount:buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(keyCount),keys:this.accountKeys.map(key=>toBuffer(key.toBytes())),recentBlockhash:bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(this.recentBlockhash)},signData=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(2048),length=signDataLayout.encode(transaction,signData);return instructionBuffer.copy(signData,length),signData.slice(0,length+instructionBuffer.length)}static from(buffer){let byteArray=[...buffer],numRequiredSignatures=byteArray.shift();if(numRequiredSignatures!==(127&numRequiredSignatures))throw Error("Versioned messages must be deserialized with VersionedMessage.deserialize()");let numReadonlySignedAccounts=byteArray.shift(),numReadonlyUnsignedAccounts=byteArray.shift(),accountCount=decodeLength(byteArray),accountKeys=[];for(let i=0;i<accountCount;i++){let account=byteArray.slice(0,32);byteArray=byteArray.slice(32),accountKeys.push(new PublicKey(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(account)))}let recentBlockhash=byteArray.slice(0,32);byteArray=byteArray.slice(32);let instructionCount=decodeLength(byteArray),instructions=[];for(let i1=0;i1<instructionCount;i1++){let programIdIndex=byteArray.shift(),accountCount1=decodeLength(byteArray),accounts=byteArray.slice(0,accountCount1);byteArray=byteArray.slice(accountCount1);let dataLength=decodeLength(byteArray),dataSlice=byteArray.slice(0,dataLength),data=bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(dataSlice));byteArray=byteArray.slice(dataLength),instructions.push({programIdIndex,accounts,data})}let messageArgs={header:{numRequiredSignatures,numReadonlySignedAccounts,numReadonlyUnsignedAccounts},recentBlockhash:bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(recentBlockhash)),accountKeys,instructions};return new Message(messageArgs)}}class MessageV0{constructor(args){this.header=void 0,this.staticAccountKeys=void 0,this.recentBlockhash=void 0,this.compiledInstructions=void 0,this.addressTableLookups=void 0,this.header=args.header,this.staticAccountKeys=args.staticAccountKeys,this.recentBlockhash=args.recentBlockhash,this.compiledInstructions=args.compiledInstructions,this.addressTableLookups=args.addressTableLookups}get version(){return 0}get numAccountKeysFromLookups(){let count=0;for(let lookup of this.addressTableLookups)count+=lookup.readonlyIndexes.length+lookup.writableIndexes.length;return count}getAccountKeys(args){let accountKeysFromLookups;if(args&&"accountKeysFromLookups"in args&&args.accountKeysFromLookups){if(this.numAccountKeysFromLookups!=args.accountKeysFromLookups.writable.length+args.accountKeysFromLookups.readonly.length)throw Error("Failed to get account keys because of a mismatch in the number of account keys from lookups");accountKeysFromLookups=args.accountKeysFromLookups}else if(args&&"addressLookupTableAccounts"in args&&args.addressLookupTableAccounts)accountKeysFromLookups=this.resolveAddressTableLookups(args.addressLookupTableAccounts);else if(this.addressTableLookups.length>0)throw Error("Failed to get account keys because address table lookups were not resolved");return new MessageAccountKeys(this.staticAccountKeys,accountKeysFromLookups)}isAccountSigner(index){return index<this.header.numRequiredSignatures}isAccountWritable(index){let numSignedAccounts=this.header.numRequiredSignatures,numStaticAccountKeys=this.staticAccountKeys.length;if(index>=numStaticAccountKeys){let numWritableLookupAccountKeys=this.addressTableLookups.reduce((count,lookup)=>count+lookup.writableIndexes.length,0);return index-numStaticAccountKeys<numWritableLookupAccountKeys}if(index>=this.header.numRequiredSignatures){let numWritableUnsignedAccounts=numStaticAccountKeys-numSignedAccounts-this.header.numReadonlyUnsignedAccounts;return index-numSignedAccounts<numWritableUnsignedAccounts}{let numWritableSignedAccounts=numSignedAccounts-this.header.numReadonlySignedAccounts;return index<numWritableSignedAccounts}}resolveAddressTableLookups(addressLookupTableAccounts){let accountKeysFromLookups={writable:[],readonly:[]};for(let tableLookup of this.addressTableLookups){let tableAccount=addressLookupTableAccounts.find(account=>account.key.equals(tableLookup.accountKey));if(!tableAccount)throw Error(`Failed to find address lookup table account for table key ${tableLookup.accountKey.toBase58()}`);for(let index of tableLookup.writableIndexes)if(index<tableAccount.state.addresses.length)accountKeysFromLookups.writable.push(tableAccount.state.addresses[index]);else throw Error(`Failed to find address for index ${index} in address lookup table ${tableLookup.accountKey.toBase58()}`);for(let index1 of tableLookup.readonlyIndexes)if(index1<tableAccount.state.addresses.length)accountKeysFromLookups.readonly.push(tableAccount.state.addresses[index1]);else throw Error(`Failed to find address for index ${index1} in address lookup table ${tableLookup.accountKey.toBase58()}`)}return accountKeysFromLookups}static compile(args){let compiledKeys=CompiledKeys.compile(args.instructions,args.payerKey),addressTableLookups=[],accountKeysFromLookups={writable:[],readonly:[]},lookupTableAccounts=args.addressLookupTableAccounts||[];for(let lookupTable of lookupTableAccounts){let extractResult=compiledKeys.extractTableLookup(lookupTable);if(void 0!==extractResult){let[addressTableLookup,{writable,readonly}]=extractResult;addressTableLookups.push(addressTableLookup),accountKeysFromLookups.writable.push(...writable),accountKeysFromLookups.readonly.push(...readonly)}}let[header,staticAccountKeys]=compiledKeys.getMessageComponents(),accountKeys=new MessageAccountKeys(staticAccountKeys,accountKeysFromLookups),compiledInstructions=accountKeys.compileInstructions(args.instructions);return new MessageV0({header,staticAccountKeys,recentBlockhash:args.recentBlockhash,compiledInstructions,addressTableLookups})}serialize(){let encodedStaticAccountKeysLength=[];encodeLength(encodedStaticAccountKeysLength,this.staticAccountKeys.length);let serializedInstructions=this.serializeInstructions(),encodedInstructionsLength=[];encodeLength(encodedInstructionsLength,this.compiledInstructions.length);let serializedAddressTableLookups=this.serializeAddressTableLookups(),encodedAddressTableLookupsLength=[];encodeLength(encodedAddressTableLookupsLength,this.addressTableLookups.length);let messageLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("prefix"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("numRequiredSignatures"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("numReadonlySignedAccounts"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("numReadonlyUnsignedAccounts")],"header"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(encodedStaticAccountKeysLength.length,"staticAccountKeysLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(publicKey(),this.staticAccountKeys.length,"staticAccountKeys"),publicKey("recentBlockhash"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(encodedInstructionsLength.length,"instructionsLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(serializedInstructions.length,"serializedInstructions"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(encodedAddressTableLookupsLength.length,"addressTableLookupsLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(serializedAddressTableLookups.length,"serializedAddressTableLookups")]),serializedMessage=new Uint8Array(1232),serializedMessageLength=messageLayout.encode({prefix:128,header:this.header,staticAccountKeysLength:new Uint8Array(encodedStaticAccountKeysLength),staticAccountKeys:this.staticAccountKeys.map(key=>key.toBytes()),recentBlockhash:bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(this.recentBlockhash),instructionsLength:new Uint8Array(encodedInstructionsLength),serializedInstructions,addressTableLookupsLength:new Uint8Array(encodedAddressTableLookupsLength),serializedAddressTableLookups},serializedMessage);return serializedMessage.slice(0,serializedMessageLength)}serializeInstructions(){let serializedLength=0,serializedInstructions=new Uint8Array(1232);for(let instruction of this.compiledInstructions){let encodedAccountKeyIndexesLength=[];encodeLength(encodedAccountKeyIndexesLength,instruction.accountKeyIndexes.length);let encodedDataLength=[];encodeLength(encodedDataLength,instruction.data.length);let instructionLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("programIdIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(encodedAccountKeyIndexesLength.length,"encodedAccountKeyIndexesLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8(),instruction.accountKeyIndexes.length,"accountKeyIndexes"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(encodedDataLength.length,"encodedDataLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(instruction.data.length,"data")]);serializedLength+=instructionLayout.encode({programIdIndex:instruction.programIdIndex,encodedAccountKeyIndexesLength:new Uint8Array(encodedAccountKeyIndexesLength),accountKeyIndexes:instruction.accountKeyIndexes,encodedDataLength:new Uint8Array(encodedDataLength),data:instruction.data},serializedInstructions,serializedLength)}return serializedInstructions.slice(0,serializedLength)}serializeAddressTableLookups(){let serializedLength=0,serializedAddressTableLookups=new Uint8Array(1232);for(let lookup of this.addressTableLookups){let encodedWritableIndexesLength=[];encodeLength(encodedWritableIndexesLength,lookup.writableIndexes.length);let encodedReadonlyIndexesLength=[];encodeLength(encodedReadonlyIndexesLength,lookup.readonlyIndexes.length);let addressTableLookupLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([publicKey("accountKey"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(encodedWritableIndexesLength.length,"encodedWritableIndexesLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8(),lookup.writableIndexes.length,"writableIndexes"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(encodedReadonlyIndexesLength.length,"encodedReadonlyIndexesLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8(),lookup.readonlyIndexes.length,"readonlyIndexes")]);serializedLength+=addressTableLookupLayout.encode({accountKey:lookup.accountKey.toBytes(),encodedWritableIndexesLength:new Uint8Array(encodedWritableIndexesLength),writableIndexes:lookup.writableIndexes,encodedReadonlyIndexesLength:new Uint8Array(encodedReadonlyIndexesLength),readonlyIndexes:lookup.readonlyIndexes},serializedAddressTableLookups,serializedLength)}return serializedAddressTableLookups.slice(0,serializedLength)}static deserialize(serializedMessage){let byteArray=[...serializedMessage],prefix=byteArray.shift(),maskedPrefix=127&prefix;assert(prefix!==maskedPrefix,"Expected versioned message but received legacy message"),assert(0===maskedPrefix,`Expected versioned message with version 0 but found version ${maskedPrefix}`);let header={numRequiredSignatures:byteArray.shift(),numReadonlySignedAccounts:byteArray.shift(),numReadonlyUnsignedAccounts:byteArray.shift()},staticAccountKeys=[],staticAccountKeysLength=decodeLength(byteArray);for(let i=0;i<staticAccountKeysLength;i++)staticAccountKeys.push(new PublicKey(byteArray.splice(0,32)));let recentBlockhash=bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(byteArray.splice(0,32)),instructionCount=decodeLength(byteArray),compiledInstructions=[];for(let i1=0;i1<instructionCount;i1++){let programIdIndex=byteArray.shift(),accountKeyIndexesLength=decodeLength(byteArray),accountKeyIndexes=byteArray.splice(0,accountKeyIndexesLength),dataLength=decodeLength(byteArray),data=new Uint8Array(byteArray.splice(0,dataLength));compiledInstructions.push({programIdIndex,accountKeyIndexes,data})}let addressTableLookupsCount=decodeLength(byteArray),addressTableLookups=[];for(let i2=0;i2<addressTableLookupsCount;i2++){let accountKey=new PublicKey(byteArray.splice(0,32)),writableIndexesLength=decodeLength(byteArray),writableIndexes=byteArray.splice(0,writableIndexesLength),readonlyIndexesLength=decodeLength(byteArray),readonlyIndexes=byteArray.splice(0,readonlyIndexesLength);addressTableLookups.push({accountKey,writableIndexes,readonlyIndexes})}return new MessageV0({header,staticAccountKeys,recentBlockhash,compiledInstructions,addressTableLookups})}}let VersionedMessage={deserializeMessageVersion(serializedMessage){let prefix=serializedMessage[0],maskedPrefix=127&prefix;return maskedPrefix===prefix?"legacy":maskedPrefix},deserialize(serializedMessage){let version=VersionedMessage.deserializeMessageVersion(serializedMessage);if("legacy"===version)return Message.from(serializedMessage);if(0===version)return MessageV0.deserialize(serializedMessage);throw Error(`Transaction message version ${version} deserialization is not supported`)}};(TransactionStatus1=TransactionStatus||(TransactionStatus={}))[TransactionStatus1.BLOCKHEIGHT_EXCEEDED=0]="BLOCKHEIGHT_EXCEEDED",TransactionStatus1[TransactionStatus1.PROCESSED=1]="PROCESSED",TransactionStatus1[TransactionStatus1.TIMED_OUT=2]="TIMED_OUT",TransactionStatus1[TransactionStatus1.NONCE_INVALID=3]="NONCE_INVALID";let DEFAULT_SIGNATURE=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(64).fill(0);class TransactionInstruction{constructor(opts){this.keys=void 0,this.programId=void 0,this.data=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(0),this.programId=opts.programId,this.keys=opts.keys,opts.data&&(this.data=opts.data)}toJSON(){return{keys:this.keys.map(({pubkey,isSigner,isWritable})=>({pubkey:pubkey.toJSON(),isSigner,isWritable})),programId:this.programId.toJSON(),data:[...this.data]}}}class Transaction{get signature(){return this.signatures.length>0?this.signatures[0].signature:null}constructor(opts){if(this.signatures=[],this.feePayer=void 0,this.instructions=[],this.recentBlockhash=void 0,this.lastValidBlockHeight=void 0,this.nonceInfo=void 0,this.minNonceContextSlot=void 0,this._message=void 0,this._json=void 0,!opts)return;if(opts.feePayer&&(this.feePayer=opts.feePayer),opts.signatures&&(this.signatures=opts.signatures),Object.prototype.hasOwnProperty.call(opts,"nonceInfo")){let{minContextSlot,nonceInfo}=opts;this.minNonceContextSlot=minContextSlot,this.nonceInfo=nonceInfo}else if(Object.prototype.hasOwnProperty.call(opts,"lastValidBlockHeight")){let{blockhash,lastValidBlockHeight}=opts;this.recentBlockhash=blockhash,this.lastValidBlockHeight=lastValidBlockHeight}else{let{recentBlockhash,nonceInfo:nonceInfo1}=opts;nonceInfo1&&(this.nonceInfo=nonceInfo1),this.recentBlockhash=recentBlockhash}}toJSON(){return{recentBlockhash:this.recentBlockhash||null,feePayer:this.feePayer?this.feePayer.toJSON():null,nonceInfo:this.nonceInfo?{nonce:this.nonceInfo.nonce,nonceInstruction:this.nonceInfo.nonceInstruction.toJSON()}:null,instructions:this.instructions.map(instruction=>instruction.toJSON()),signers:this.signatures.map(({publicKey})=>publicKey.toJSON())}}add(...items){if(0===items.length)throw Error("No instructions");return items.forEach(item=>{"instructions"in item?this.instructions=this.instructions.concat(item.instructions):"data"in item&&"programId"in item&&"keys"in item?this.instructions.push(item):this.instructions.push(new TransactionInstruction(item))}),this}compileMessage(){let recentBlockhash,instructions,feePayer;if(this._message&&JSON.stringify(this.toJSON())===JSON.stringify(this._json))return this._message;if(this.nonceInfo?(recentBlockhash=this.nonceInfo.nonce,instructions=this.instructions[0]!=this.nonceInfo.nonceInstruction?[this.nonceInfo.nonceInstruction,...this.instructions]:this.instructions):(recentBlockhash=this.recentBlockhash,instructions=this.instructions),!recentBlockhash)throw Error("Transaction recentBlockhash required");if(instructions.length<1&&console.warn("No instructions provided"),this.feePayer)feePayer=this.feePayer;else if(this.signatures.length>0&&this.signatures[0].publicKey)feePayer=this.signatures[0].publicKey;else throw Error("Transaction fee payer required");for(let i=0;i<instructions.length;i++)if(void 0===instructions[i].programId)throw Error(`Transaction instruction index ${i} has undefined program id`);let programIds=[],accountMetas=[];instructions.forEach(instruction=>{instruction.keys.forEach(accountMeta=>{accountMetas.push({...accountMeta})});let programId=instruction.programId.toString();programIds.includes(programId)||programIds.push(programId)}),programIds.forEach(programId=>{accountMetas.push({pubkey:new PublicKey(programId),isSigner:!1,isWritable:!1})});let uniqueMetas=[];accountMetas.forEach(accountMeta=>{let pubkeyString=accountMeta.pubkey.toString(),uniqueIndex=uniqueMetas.findIndex(x=>x.pubkey.toString()===pubkeyString);uniqueIndex>-1?(uniqueMetas[uniqueIndex].isWritable=uniqueMetas[uniqueIndex].isWritable||accountMeta.isWritable,uniqueMetas[uniqueIndex].isSigner=uniqueMetas[uniqueIndex].isSigner||accountMeta.isSigner):uniqueMetas.push(accountMeta)}),uniqueMetas.sort(function(x,y){return x.isSigner!==y.isSigner?x.isSigner?-1:1:x.isWritable!==y.isWritable?x.isWritable?-1:1:x.pubkey.toBase58().localeCompare(y.pubkey.toBase58())});let feePayerIndex=uniqueMetas.findIndex(x=>x.pubkey.equals(feePayer));if(feePayerIndex>-1){let[payerMeta]=uniqueMetas.splice(feePayerIndex,1);payerMeta.isSigner=!0,payerMeta.isWritable=!0,uniqueMetas.unshift(payerMeta)}else uniqueMetas.unshift({pubkey:feePayer,isSigner:!0,isWritable:!0});for(let signature of this.signatures){let uniqueIndex=uniqueMetas.findIndex(x=>x.pubkey.equals(signature.publicKey));if(uniqueIndex>-1)uniqueMetas[uniqueIndex].isSigner||(uniqueMetas[uniqueIndex].isSigner=!0,console.warn("Transaction references a signature that is unnecessary, only the fee payer and instruction signer accounts should sign a transaction. This behavior is deprecated and will throw an error in the next major version release."));else throw Error(`unknown signer: ${signature.publicKey.toString()}`)}let numRequiredSignatures=0,numReadonlySignedAccounts=0,numReadonlyUnsignedAccounts=0,signedKeys=[],unsignedKeys=[];uniqueMetas.forEach(({pubkey,isSigner,isWritable})=>{isSigner?(signedKeys.push(pubkey.toString()),numRequiredSignatures+=1,isWritable||(numReadonlySignedAccounts+=1)):(unsignedKeys.push(pubkey.toString()),isWritable||(numReadonlyUnsignedAccounts+=1))});let accountKeys=signedKeys.concat(unsignedKeys),compiledInstructions=instructions.map(instruction=>{let{data,programId}=instruction;return{programIdIndex:accountKeys.indexOf(programId.toString()),accounts:instruction.keys.map(meta=>accountKeys.indexOf(meta.pubkey.toString())),data:bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(data)}});return compiledInstructions.forEach(instruction=>{assert(instruction.programIdIndex>=0),instruction.accounts.forEach(keyIndex=>assert(keyIndex>=0))}),new Message({header:{numRequiredSignatures,numReadonlySignedAccounts,numReadonlyUnsignedAccounts},accountKeys,recentBlockhash,instructions:compiledInstructions})}_compile(){let message=this.compileMessage(),signedKeys=message.accountKeys.slice(0,message.header.numRequiredSignatures);if(this.signatures.length===signedKeys.length){let valid=this.signatures.every((pair,index)=>signedKeys[index].equals(pair.publicKey));if(valid)return message}return this.signatures=signedKeys.map(publicKey=>({signature:null,publicKey})),message}serializeMessage(){return this._compile().serialize()}async getEstimatedFee(connection){return(await connection.getFeeForMessage(this.compileMessage())).value}setSigners(...signers){if(0===signers.length)throw Error("No signers");let seen=new Set;this.signatures=signers.filter(publicKey=>{let key=publicKey.toString();return!seen.has(key)&&(seen.add(key),!0)}).map(publicKey=>({signature:null,publicKey}))}sign(...signers){if(0===signers.length)throw Error("No signers");let seen=new Set,uniqueSigners=[];for(let signer of signers){let key=signer.publicKey.toString();seen.has(key)||(seen.add(key),uniqueSigners.push(signer))}this.signatures=uniqueSigners.map(signer=>({signature:null,publicKey:signer.publicKey}));let message=this._compile();this._partialSign(message,...uniqueSigners)}partialSign(...signers){if(0===signers.length)throw Error("No signers");let seen=new Set,uniqueSigners=[];for(let signer of signers){let key=signer.publicKey.toString();seen.has(key)||(seen.add(key),uniqueSigners.push(signer))}let message=this._compile();this._partialSign(message,...uniqueSigners)}_partialSign(message,...signers){let signData=message.serialize();signers.forEach(signer=>{let signature=sign(signData,signer.secretKey);this._addSignature(signer.publicKey,toBuffer(signature))})}addSignature(pubkey,signature){this._compile(),this._addSignature(pubkey,signature)}_addSignature(pubkey,signature){assert(64===signature.length);let index=this.signatures.findIndex(sigpair=>pubkey.equals(sigpair.publicKey));if(index<0)throw Error(`unknown signer: ${pubkey.toString()}`);this.signatures[index].signature=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signature)}verifySignatures(requireAllSignatures){return this._verifySignatures(this.serializeMessage(),void 0===requireAllSignatures||requireAllSignatures)}_verifySignatures(signData,requireAllSignatures){for(let{signature,publicKey}of this.signatures)if(null===signature){if(requireAllSignatures)return!1}else if(!verify(signature,signData,publicKey.toBytes()))return!1;return!0}serialize(config){let{requireAllSignatures,verifySignatures}=Object.assign({requireAllSignatures:!0,verifySignatures:!0},config),signData=this.serializeMessage();if(verifySignatures&&!this._verifySignatures(signData,requireAllSignatures))throw Error("Signature verification failed");return this._serialize(signData)}_serialize(signData){let{signatures}=this,signatureCount=[];encodeLength(signatureCount,signatures.length);let transactionLength=signatureCount.length+64*signatures.length+signData.length,wireTransaction=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(transactionLength);return assert(signatures.length<256),buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signatureCount).copy(wireTransaction,0),signatures.forEach(({signature},index)=>{null!==signature&&(assert(64===signature.length,"signature has invalid length"),buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signature).copy(wireTransaction,signatureCount.length+64*index))}),signData.copy(wireTransaction,signatureCount.length+64*signatures.length),assert(wireTransaction.length<=1232,`Transaction too large: ${wireTransaction.length} > 1232`),wireTransaction}get keys(){return assert(1===this.instructions.length),this.instructions[0].keys.map(keyObj=>keyObj.pubkey)}get programId(){return assert(1===this.instructions.length),this.instructions[0].programId}get data(){return assert(1===this.instructions.length),this.instructions[0].data}static from(buffer){let byteArray=[...buffer],signatureCount=decodeLength(byteArray),signatures=[];for(let i=0;i<signatureCount;i++){let signature=byteArray.slice(0,64);byteArray=byteArray.slice(64),signatures.push(bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(signature)))}return Transaction.populate(Message.from(byteArray),signatures)}static populate(message,signatures=[]){let transaction=new Transaction;return transaction.recentBlockhash=message.recentBlockhash,message.header.numRequiredSignatures>0&&(transaction.feePayer=message.accountKeys[0]),signatures.forEach((signature,index)=>{let sigPubkeyPair={signature:signature==bs58__WEBPACK_IMPORTED_MODULE_4___default().encode(DEFAULT_SIGNATURE)?null:bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(signature),publicKey:message.accountKeys[index]};transaction.signatures.push(sigPubkeyPair)}),message.instructions.forEach(instruction=>{let keys=instruction.accounts.map(account=>{let pubkey=message.accountKeys[account];return{pubkey,isSigner:transaction.signatures.some(keyObj=>keyObj.publicKey.toString()===pubkey.toString())||message.isAccountSigner(account),isWritable:message.isAccountWritable(account)}});transaction.instructions.push(new TransactionInstruction({keys,programId:message.accountKeys[instruction.programIdIndex],data:bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(instruction.data)}))}),transaction._message=message,transaction._json=transaction.toJSON(),transaction}}let SYSVAR_CLOCK_PUBKEY=new PublicKey("SysvarC1ock11111111111111111111111111111111");new PublicKey("SysvarEpochSchedu1e111111111111111111111111"),new PublicKey("Sysvar1nstructions1111111111111111111111111");let SYSVAR_RECENT_BLOCKHASHES_PUBKEY=new PublicKey("SysvarRecentB1ockHashes11111111111111111111"),SYSVAR_RENT_PUBKEY=new PublicKey("SysvarRent111111111111111111111111111111111");new PublicKey("SysvarRewards111111111111111111111111111111"),new PublicKey("SysvarS1otHashes111111111111111111111111111"),new PublicKey("SysvarS1otHistory11111111111111111111111111");let SYSVAR_STAKE_HISTORY_PUBKEY=new PublicKey("SysvarStakeHistory1111111111111111111111111");async function sendAndConfirmTransaction(connection,transaction,signers,options){let status;let sendOptions=options&&{skipPreflight:options.skipPreflight,preflightCommitment:options.preflightCommitment||options.commitment,maxRetries:options.maxRetries,minContextSlot:options.minContextSlot},signature=await connection.sendTransaction(transaction,signers,sendOptions);if(null!=transaction.recentBlockhash&&null!=transaction.lastValidBlockHeight)status=(await connection.confirmTransaction({abortSignal:null==options?void 0:options.abortSignal,signature:signature,blockhash:transaction.recentBlockhash,lastValidBlockHeight:transaction.lastValidBlockHeight},options&&options.commitment)).value;else if(null!=transaction.minNonceContextSlot&&null!=transaction.nonceInfo){let{nonceInstruction}=transaction.nonceInfo,nonceAccountPubkey=nonceInstruction.keys[0].pubkey;status=(await connection.confirmTransaction({abortSignal:null==options?void 0:options.abortSignal,minContextSlot:transaction.minNonceContextSlot,nonceAccountPubkey,nonceValue:transaction.nonceInfo.nonce,signature},options&&options.commitment)).value}else(null==options?void 0:options.abortSignal)!=null&&console.warn("sendAndConfirmTransaction(): A transaction with a deprecated confirmation strategy was supplied along with an `abortSignal`. Only transactions having `lastValidBlockHeight` or a combination of `nonceInfo` and `minNonceContextSlot` are abortable."),status=(await connection.confirmTransaction(signature,options&&options.commitment)).value;if(status.err)throw Error(`Transaction ${signature} failed (${JSON.stringify(status)})`);return signature}function sleep(ms){return new Promise(resolve=>setTimeout(resolve,ms))}function encodeData(type,fields){let allocLength=type.layout.span>=0?type.layout.span:function getAlloc(type,fields){let getItemAlloc=item=>{if(item.span>=0)return item.span;if("function"==typeof item.alloc)return item.alloc(fields[item.property]);if("count"in item&&"elementLayout"in item){let field=fields[item.property];if(Array.isArray(field))return field.length*getItemAlloc(item.elementLayout)}else if("fields"in item)return getAlloc({layout:item},fields[item.property]);return 0},alloc=0;return type.layout.fields.forEach(item=>{alloc+=getItemAlloc(item)}),alloc}(type,fields),data=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(allocLength),layoutFields=Object.assign({instruction:type.index},fields);return type.layout.encode(layoutFields,data),data}let FeeCalculatorLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("lamportsPerSignature"),NonceAccountLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("version"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("state"),publicKey("authorizedPubkey"),publicKey("nonce"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([FeeCalculatorLayout],"feeCalculator")]),NONCE_ACCOUNT_LENGTH=NonceAccountLayout.span;class NonceAccount{constructor(args){this.authorizedPubkey=void 0,this.nonce=void 0,this.feeCalculator=void 0,this.authorizedPubkey=args.authorizedPubkey,this.nonce=args.nonce,this.feeCalculator=args.feeCalculator}static fromAccountData(buffer){let nonceAccount=NonceAccountLayout.decode(toBuffer(buffer),0);return new NonceAccount({authorizedPubkey:new PublicKey(nonceAccount.authorizedPubkey),nonce:new PublicKey(nonceAccount.nonce).toString(),feeCalculator:nonceAccount.feeCalculator})}}let encodeDecode=layout=>{let decode=layout.decode.bind(layout),encode=layout.encode.bind(layout);return{decode,encode}},u64=property=>{let layout=(0,_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik)(8,property),{encode,decode}=encodeDecode(layout),bigIntLayout=layout;return bigIntLayout.decode=(buffer,offset)=>{let src=decode(buffer,offset);return(0,bigint_buffer__WEBPACK_IMPORTED_MODULE_8__.oU)(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(src))},bigIntLayout.encode=(bigInt,buffer,offset)=>{let src=(0,bigint_buffer__WEBPACK_IMPORTED_MODULE_8__.k$)(bigInt,8);return encode(src,buffer,offset)},bigIntLayout},SYSTEM_INSTRUCTION_LAYOUTS=Object.freeze({Create:{index:0,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("lamports"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("space"),publicKey("programId")])},Assign:{index:1,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("programId")])},Transfer:{index:2,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),u64("lamports")])},CreateWithSeed:{index:3,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("base"),rustString("seed"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("lamports"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("space"),publicKey("programId")])},AdvanceNonceAccount:{index:4,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])},WithdrawNonceAccount:{index:5,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("lamports")])},InitializeNonceAccount:{index:6,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("authorized")])},AuthorizeNonceAccount:{index:7,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("authorized")])},Allocate:{index:8,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("space")])},AllocateWithSeed:{index:9,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("base"),rustString("seed"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("space"),publicKey("programId")])},AssignWithSeed:{index:10,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("base"),rustString("seed"),publicKey("programId")])},TransferWithSeed:{index:11,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),u64("lamports"),rustString("seed"),publicKey("programId")])},UpgradeNonceAccount:{index:12,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])}});class SystemProgram{constructor(){}static createAccount(params){let type=SYSTEM_INSTRUCTION_LAYOUTS.Create,data=encodeData(type,{lamports:params.lamports,space:params.space,programId:toBuffer(params.programId.toBuffer())});return new TransactionInstruction({keys:[{pubkey:params.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:params.newAccountPubkey,isSigner:!0,isWritable:!0}],programId:this.programId,data})}static transfer(params){let data,keys;if("basePubkey"in params){let type=SYSTEM_INSTRUCTION_LAYOUTS.TransferWithSeed;data=encodeData(type,{lamports:BigInt(params.lamports),seed:params.seed,programId:toBuffer(params.programId.toBuffer())}),keys=[{pubkey:params.fromPubkey,isSigner:!1,isWritable:!0},{pubkey:params.basePubkey,isSigner:!0,isWritable:!1},{pubkey:params.toPubkey,isSigner:!1,isWritable:!0}]}else{let type1=SYSTEM_INSTRUCTION_LAYOUTS.Transfer;data=encodeData(type1,{lamports:BigInt(params.lamports)}),keys=[{pubkey:params.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:params.toPubkey,isSigner:!1,isWritable:!0}]}return new TransactionInstruction({keys,programId:this.programId,data})}static assign(params){let data,keys;if("basePubkey"in params){let type=SYSTEM_INSTRUCTION_LAYOUTS.AssignWithSeed;data=encodeData(type,{base:toBuffer(params.basePubkey.toBuffer()),seed:params.seed,programId:toBuffer(params.programId.toBuffer())}),keys=[{pubkey:params.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:params.basePubkey,isSigner:!0,isWritable:!1}]}else{let type1=SYSTEM_INSTRUCTION_LAYOUTS.Assign;data=encodeData(type1,{programId:toBuffer(params.programId.toBuffer())}),keys=[{pubkey:params.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys,programId:this.programId,data})}static createAccountWithSeed(params){let type=SYSTEM_INSTRUCTION_LAYOUTS.CreateWithSeed,data=encodeData(type,{base:toBuffer(params.basePubkey.toBuffer()),seed:params.seed,lamports:params.lamports,space:params.space,programId:toBuffer(params.programId.toBuffer())}),keys=[{pubkey:params.fromPubkey,isSigner:!0,isWritable:!0},{pubkey:params.newAccountPubkey,isSigner:!1,isWritable:!0}];return params.basePubkey!=params.fromPubkey&&keys.push({pubkey:params.basePubkey,isSigner:!0,isWritable:!1}),new TransactionInstruction({keys,programId:this.programId,data})}static createNonceAccount(params){let transaction=new Transaction;"basePubkey"in params&&"seed"in params?transaction.add(SystemProgram.createAccountWithSeed({fromPubkey:params.fromPubkey,newAccountPubkey:params.noncePubkey,basePubkey:params.basePubkey,seed:params.seed,lamports:params.lamports,space:NONCE_ACCOUNT_LENGTH,programId:this.programId})):transaction.add(SystemProgram.createAccount({fromPubkey:params.fromPubkey,newAccountPubkey:params.noncePubkey,lamports:params.lamports,space:NONCE_ACCOUNT_LENGTH,programId:this.programId}));let initParams={noncePubkey:params.noncePubkey,authorizedPubkey:params.authorizedPubkey};return transaction.add(this.nonceInitialize(initParams)),transaction}static nonceInitialize(params){let type=SYSTEM_INSTRUCTION_LAYOUTS.InitializeNonceAccount,data=encodeData(type,{authorized:toBuffer(params.authorizedPubkey.toBuffer())}),instructionData={keys:[{pubkey:params.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RECENT_BLOCKHASHES_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1}],programId:this.programId,data};return new TransactionInstruction(instructionData)}static nonceAdvance(params){let type=SYSTEM_INSTRUCTION_LAYOUTS.AdvanceNonceAccount,data=encodeData(type),instructionData={keys:[{pubkey:params.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RECENT_BLOCKHASHES_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:params.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data};return new TransactionInstruction(instructionData)}static nonceWithdraw(params){let type=SYSTEM_INSTRUCTION_LAYOUTS.WithdrawNonceAccount,data=encodeData(type,{lamports:params.lamports});return new TransactionInstruction({keys:[{pubkey:params.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:params.toPubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RECENT_BLOCKHASHES_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:params.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static nonceAuthorize(params){let type=SYSTEM_INSTRUCTION_LAYOUTS.AuthorizeNonceAccount,data=encodeData(type,{authorized:toBuffer(params.newAuthorizedPubkey.toBuffer())});return new TransactionInstruction({keys:[{pubkey:params.noncePubkey,isSigner:!1,isWritable:!0},{pubkey:params.authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static allocate(params){let data,keys;if("basePubkey"in params){let type=SYSTEM_INSTRUCTION_LAYOUTS.AllocateWithSeed;data=encodeData(type,{base:toBuffer(params.basePubkey.toBuffer()),seed:params.seed,space:params.space,programId:toBuffer(params.programId.toBuffer())}),keys=[{pubkey:params.accountPubkey,isSigner:!1,isWritable:!0},{pubkey:params.basePubkey,isSigner:!0,isWritable:!1}]}else{let type1=SYSTEM_INSTRUCTION_LAYOUTS.Allocate;data=encodeData(type1,{space:params.space}),keys=[{pubkey:params.accountPubkey,isSigner:!0,isWritable:!0}]}return new TransactionInstruction({keys,programId:this.programId,data})}}SystemProgram.programId=new PublicKey("11111111111111111111111111111111");class Loader{constructor(){}static getMinNumSignatures(dataLength){return 2*(Math.ceil(dataLength/Loader.chunkSize)+1+1)}static async load(connection,payer,program,programId,data){{let balanceNeeded=await connection.getMinimumBalanceForRentExemption(data.length),programInfo=await connection.getAccountInfo(program.publicKey,"confirmed"),transaction=null;if(null!==programInfo){if(programInfo.executable)return console.error("Program load failed, account is already executable"),!1;programInfo.data.length!==data.length&&(transaction=transaction||new Transaction).add(SystemProgram.allocate({accountPubkey:program.publicKey,space:data.length})),programInfo.owner.equals(programId)||(transaction=transaction||new Transaction).add(SystemProgram.assign({accountPubkey:program.publicKey,programId})),programInfo.lamports<balanceNeeded&&(transaction=transaction||new Transaction).add(SystemProgram.transfer({fromPubkey:payer.publicKey,toPubkey:program.publicKey,lamports:balanceNeeded-programInfo.lamports}))}else transaction=new Transaction().add(SystemProgram.createAccount({fromPubkey:payer.publicKey,newAccountPubkey:program.publicKey,lamports:balanceNeeded>0?balanceNeeded:1,space:data.length,programId}));null!==transaction&&await sendAndConfirmTransaction(connection,transaction,[payer,program],{commitment:"confirmed"})}let dataLayout=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("offset"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("bytesLength"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("bytesLengthPadding"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("byte"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.cv(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq(),-8),"bytes")]),chunkSize=Loader.chunkSize,offset=0,array=data,transactions=[];for(;array.length>0;){let bytes=array.slice(0,chunkSize),data1=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(chunkSize+16);dataLayout.encode({instruction:0,offset,bytes:bytes,bytesLength:0,bytesLengthPadding:0},data1);let transaction1=new Transaction().add({keys:[{pubkey:program.publicKey,isSigner:!0,isWritable:!0}],programId,data:data1});transactions.push(sendAndConfirmTransaction(connection,transaction1,[payer,program],{commitment:"confirmed"})),connection._rpcEndpoint.includes("solana.com")&&await sleep(250),offset+=chunkSize,array=array.slice(chunkSize)}await Promise.all(transactions);{let dataLayout1=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")]),data2=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(dataLayout1.span);dataLayout1.encode({instruction:1},data2);let transaction2=new Transaction().add({keys:[{pubkey:program.publicKey,isSigner:!0,isWritable:!0},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1}],programId,data:data2});await sendAndConfirmTransaction(connection,transaction2,[payer,program],{commitment:"confirmed"})}return!0}}Loader.chunkSize=932,new PublicKey("BPFLoader2111111111111111111111111111111111");var objToString=Object.prototype.toString,objKeys=Object.keys||function(obj){var keys=[];for(var name in obj)keys.push(name);return keys},fastStableStringify$1=function(val){var returnVal=function stringify(val,isArrayProp){var i,max,str,keys,key,propVal,toStr;if(!0===val)return"true";if(!1===val)return"false";switch(typeof val){case"object":if(null===val)return null;if(val.toJSON&&"function"==typeof val.toJSON)return stringify(val.toJSON(),isArrayProp);if("[object Array]"===(toStr=objToString.call(val))){for(i=0,str="[",max=val.length-1;i<max;i++)str+=stringify(val[i],!0)+",";return max>-1&&(str+=stringify(val[i],!0)),str+"]"}if("[object Object]"!==toStr)return JSON.stringify(val);for(max=(keys=objKeys(val).sort()).length,str="",i=0;i<max;)void 0!==(propVal=stringify(val[key=keys[i]],!1))&&(str&&(str+=","),str+=JSON.stringify(key)+":"+propVal),i++;return"{"+str+"}";case"function":case"undefined":return isArrayProp?null:void 0;case"string":return JSON.stringify(val);default:return isFinite(val)?val:null}}(val,!1);if(void 0!==returnVal)return""+returnVal};function trailingZeros(n){let trailingZeros=0;for(;n>1;)n/=2,trailingZeros++;return trailingZeros}class EpochSchedule{constructor(slotsPerEpoch,leaderScheduleSlotOffset,warmup,firstNormalEpoch,firstNormalSlot){this.slotsPerEpoch=void 0,this.leaderScheduleSlotOffset=void 0,this.warmup=void 0,this.firstNormalEpoch=void 0,this.firstNormalSlot=void 0,this.slotsPerEpoch=slotsPerEpoch,this.leaderScheduleSlotOffset=leaderScheduleSlotOffset,this.warmup=warmup,this.firstNormalEpoch=firstNormalEpoch,this.firstNormalSlot=firstNormalSlot}getEpoch(slot){return this.getEpochAndSlotIndex(slot)[0]}getEpochAndSlotIndex(slot){if(slot<this.firstNormalSlot){var n;let epoch=trailingZeros(0===(n=slot+32+1)?1:(n--,n|=n>>1,n|=n>>2,n|=n>>4,n|=n>>8,n|=n>>16,(n|=n>>32)+1))-trailingZeros(32)-1,epochLen=this.getSlotsInEpoch(epoch);return[epoch,slot-(epochLen-32)]}{let normalSlotIndex=slot-this.firstNormalSlot,normalEpochIndex=Math.floor(normalSlotIndex/this.slotsPerEpoch),epoch1=this.firstNormalEpoch+normalEpochIndex,slotIndex=normalSlotIndex%this.slotsPerEpoch;return[epoch1,slotIndex]}}getFirstSlotInEpoch(epoch){return epoch<=this.firstNormalEpoch?(Math.pow(2,epoch)-1)*32:(epoch-this.firstNormalEpoch)*this.slotsPerEpoch+this.firstNormalSlot}getLastSlotInEpoch(epoch){return this.getFirstSlotInEpoch(epoch)+this.getSlotsInEpoch(epoch)-1}getSlotsInEpoch(epoch){return epoch<this.firstNormalEpoch?Math.pow(2,epoch+trailingZeros(32)):this.slotsPerEpoch}}class SendTransactionError extends Error{constructor(message,logs){super(message),this.logs=void 0,this.logs=logs}}class SolanaJSONRPCError extends Error{constructor({code,message,data},customMessage){super(null!=customMessage?`${customMessage}: ${message}`:message),this.code=void 0,this.data=void 0,this.code=code,this.data=data,this.name="SolanaJSONRPCError"}}var fetchImpl=globalThis.fetch;class AddressLookupTableAccount{constructor(args){this.key=void 0,this.state=void 0,this.key=args.key,this.state=args.state}isActive(){let U64_MAX=BigInt("0xffffffffffffffff");return this.state.deactivationSlot===U64_MAX}static deserialize(accountData){let meta=function(type,data){let decoded;try{decoded=type.layout.decode(data)}catch(err){throw Error("invalid instruction; "+err)}if(decoded.typeIndex!==type.index)throw Error(`invalid account data; account type mismatch ${decoded.typeIndex} != ${type.index}`);return decoded}(LookupTableMetaLayout,accountData),serializedAddressesLen=accountData.length-56;assert(serializedAddressesLen>=0,"lookup table is invalid"),assert(serializedAddressesLen%32==0,"lookup table is invalid");let{addresses}=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(publicKey(),serializedAddressesLen/32,"addresses")]).decode(accountData.slice(56));return{deactivationSlot:meta.deactivationSlot,lastExtendedSlot:meta.lastExtendedSlot,lastExtendedSlotStartIndex:meta.lastExtendedStartIndex,authority:0!==meta.authority.length?new PublicKey(meta.authority[0]):void 0,addresses:addresses.map(address=>new PublicKey(address))}}}let LookupTableMetaLayout={index:1,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("typeIndex"),u64("deactivationSlot"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("lastExtendedSlot"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("lastExtendedStartIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8(),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(publicKey(),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.cv(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8(),-1),"authority")])},URL_RE=/^[^:]+:\/\/([^:[]+|\[[^\]]+\])(:\d+)?(.*)/i,PublicKeyFromString=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.oQ)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.eE)(PublicKey),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),value=>new PublicKey(value)),RawAccountDataResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.bc)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("base64")]),BufferFromRawAccountData=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.oQ)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.eE)(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer),RawAccountDataResult,value=>buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(value[0],"base64"));function extractCommitmentFromConfig(commitmentOrConfig){let commitment,config;if("string"==typeof commitmentOrConfig)commitment=commitmentOrConfig;else if(commitmentOrConfig){let{commitment:specifiedCommitment,...specifiedConfig}=commitmentOrConfig;commitment=specifiedCommitment,config=specifiedConfig}return{commitment,config}}function createRpcResult(result){return(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({jsonrpc:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("2.0"),id:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),result}),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({jsonrpc:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("2.0"),id:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),error:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({code:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__._4)(),message:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),data:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Yj)())})})])}let UnknownRpcResult=createRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__._4)());function jsonRpcResult(schema){return(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.oQ)(createRpcResult(schema),UnknownRpcResult,value=>"error"in value?value:{...value,result:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(value.result,schema)})}function jsonRpcResultAndContext(value){return jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({context:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),value}))}function notificationResultAndContext(value){return(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({context:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),value})}function versionedMessageFromResponse(version,response){return 0===version?new MessageV0({header:response.header,staticAccountKeys:response.accountKeys.map(accountKey=>new PublicKey(accountKey)),recentBlockhash:response.recentBlockhash,compiledInstructions:response.instructions.map(ix=>({programIdIndex:ix.programIdIndex,accountKeyIndexes:ix.accounts,data:bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(ix.data)})),addressTableLookups:response.addressTableLookups}):new Message(response)}let GetInflationGovernorResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({foundation:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),foundationTerm:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),initial:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),taper:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),terminal:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),GetInflationRewardResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({epoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),effectiveSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),amount:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),postBalance:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})))),GetInflationRateResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({total:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),validator:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),foundation:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),epoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),GetEpochInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({epoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),slotIndex:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),slotsInEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),absoluteSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),blockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),transactionCount:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}),GetEpochScheduleResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({slotsPerEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),leaderScheduleSlotOffset:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),warmup:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),firstNormalEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),firstNormalSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),GetLeaderScheduleResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IM)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())),TransactionErrorResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({}),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()])),SignatureStatusResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({err:TransactionErrorResult}),SignatureReceivedResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("receivedSignature"),VersionResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({"solana-core":(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),"feature-set":(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}),SimulatedTransactionResponseStruct=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({err:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({}),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()])),logs:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)())),accounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({executable:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),owner:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),lamports:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),data:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),rentEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))))),unitsConsumed:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),returnData:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({programId:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),data:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.bc)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("base64")])})))})),BlockProductionResponseStruct=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({byIdentity:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IM)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())),range:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({firstSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),lastSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})})),GetInflationGovernorRpcResult=jsonRpcResult(GetInflationGovernorResult),GetInflationRateRpcResult=jsonRpcResult(GetInflationRateResult),GetEpochInfoRpcResult=jsonRpcResult(GetEpochInfoResult),GetEpochScheduleRpcResult=jsonRpcResult(GetEpochScheduleResult),GetLeaderScheduleRpcResult=jsonRpcResult(GetLeaderScheduleResult),SlotRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),GetSupplyRpcResult=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({total:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),circulating:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),nonCirculating:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),nonCirculatingAccounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(PublicKeyFromString)})),TokenAmountResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({amount:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),uiAmount:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),decimals:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),uiAmountString:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)())}),GetTokenLargestAccountsResult=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({address:PublicKeyFromString,amount:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),uiAmount:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),decimals:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),uiAmountString:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)())}))),GetTokenAccountsByOwner=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:PublicKeyFromString,account:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({executable:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),owner:PublicKeyFromString,lamports:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),data:BufferFromRawAccountData,rentEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})}))),ParsedAccountDataResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({program:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parsed:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__._4)(),space:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),GetParsedTokenAccountsByOwner=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:PublicKeyFromString,account:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({executable:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),owner:PublicKeyFromString,lamports:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),data:ParsedAccountDataResult,rentEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})}))),GetLargestAccountsRpcResult=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({lamports:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),address:PublicKeyFromString}))),AccountInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({executable:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),owner:PublicKeyFromString,lamports:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),data:BufferFromRawAccountData,rentEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),KeyedAccountInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:PublicKeyFromString,account:AccountInfoResult}),ParsedOrRawAccountData=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.oQ)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.eE)(buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer),ParsedAccountDataResult]),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([RawAccountDataResult,ParsedAccountDataResult]),value=>Array.isArray(value)?(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(value,BufferFromRawAccountData):value),ParsedAccountInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({executable:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),owner:PublicKeyFromString,lamports:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),data:ParsedOrRawAccountData,rentEpoch:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),KeyedParsedAccountInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:PublicKeyFromString,account:ParsedAccountInfoResult}),StakeActivationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({state:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("active"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("inactive"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("activating"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("deactivating")]),active:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),inactive:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),GetConfirmedSignaturesForAddress2RpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({signature:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),err:TransactionErrorResult,memo:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()))}))),GetSignaturesForAddressRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({signature:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),err:TransactionErrorResult,memo:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()))}))),AccountNotificationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({subscription:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),result:notificationResultAndContext(AccountInfoResult)}),ProgramAccountInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:PublicKeyFromString,account:AccountInfoResult}),ProgramAccountNotificationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({subscription:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),result:notificationResultAndContext(ProgramAccountInfoResult)}),SlotInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({parent:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),root:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),SlotNotificationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({subscription:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),result:SlotInfoResult}),SlotUpdateResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({type:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("firstShredReceived"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("completed"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("optimisticConfirmation"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("root")]),slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),timestamp:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({type:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("createdBank"),parent:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),timestamp:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({type:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("frozen"),slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),timestamp:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),stats:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({numTransactionEntries:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),numSuccessfulTransactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),numFailedTransactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),maxTransactionsPerEntry:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})}),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({type:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("dead"),slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),timestamp:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),err:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()})]),SlotUpdateNotificationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({subscription:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),result:SlotUpdateResult}),SignatureNotificationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({subscription:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),result:notificationResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([SignatureStatusResult,SignatureReceivedResult]))}),RootNotificationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({subscription:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),result:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),ContactInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),gossip:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),tpu:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),rpc:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),version:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)())}),VoteAccountInfoResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({votePubkey:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),nodePubkey:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),activatedStake:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),epochVoteAccount:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),epochCredits:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.bc)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()])),commission:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),lastVote:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),rootSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}),GetVoteAccounts=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({current:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(VoteAccountInfoResult),delinquent:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(VoteAccountInfoResult)})),ConfirmationStatus=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("processed"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("confirmed"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("finalized")]),SignatureStatusResponse=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),confirmations:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),err:TransactionErrorResult,confirmationStatus:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(ConfirmationStatus)}),GetSignatureStatusesRpcResult=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(SignatureStatusResponse))),GetMinimumBalanceForRentExemptionRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),AddressTableLookupStruct=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accountKey:PublicKeyFromString,writableIndexes:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),readonlyIndexes:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}),ConfirmedTransactionResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({signatures:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),message:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accountKeys:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),header:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({numRequiredSignatures:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),numReadonlySignedAccounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),numReadonlyUnsignedAccounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),instructions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),data:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),programIdIndex:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})),recentBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),addressTableLookups:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(AddressTableLookupStruct))})}),AnnotatedAccountKey=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:PublicKeyFromString,signer:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),writable:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.O7)(),source:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("transaction"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("lookupTable")]))}),ConfirmedTransactionAccountsModeResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accountKeys:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(AnnotatedAccountKey),signatures:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)())}),ParsedInstructionResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({parsed:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__._4)(),program:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),programId:PublicKeyFromString}),RawInstructionResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(PublicKeyFromString),data:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),programId:PublicKeyFromString}),InstructionResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([RawInstructionResult,ParsedInstructionResult]),UnknownInstructionResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({parsed:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__._4)(),program:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),programId:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()}),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),data:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),programId:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()})]),ParsedOrRawInstruction=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.oQ)(InstructionResult,UnknownInstructionResult,value=>"accounts"in value?(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(value,RawInstructionResult):(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(value,ParsedInstructionResult)),ParsedConfirmedTransactionResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({signatures:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),message:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accountKeys:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(AnnotatedAccountKey),instructions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(ParsedOrRawInstruction),recentBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),addressTableLookups:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(AddressTableLookupStruct)))})}),TokenBalanceResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accountIndex:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),mint:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),owner:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),uiTokenAmount:TokenAmountResult}),LoadedAddressesResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({writable:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(PublicKeyFromString),readonly:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(PublicKeyFromString)}),ConfirmedTransactionMetaResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({err:TransactionErrorResult,fee:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),innerInstructions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({index:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),instructions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({accounts:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),data:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),programIdIndex:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}))})))),preBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),postBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),logMessages:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()))),preTokenBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(TokenBalanceResult))),postTokenBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(TokenBalanceResult))),loadedAddresses:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(LoadedAddressesResult),computeUnitsConsumed:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}),ParsedConfirmedTransactionMetaResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({err:TransactionErrorResult,fee:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),innerInstructions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({index:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),instructions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(ParsedOrRawInstruction)})))),preBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),postBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),logMessages:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()))),preTokenBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(TokenBalanceResult))),postTokenBalances:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(TokenBalanceResult))),loadedAddresses:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(LoadedAddressesResult),computeUnitsConsumed:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}),TransactionVersionStruct=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.G0)([(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)(0),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.i0)("legacy")]),RewardsResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({pubkey:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),lamports:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),postBalance:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),rewardType:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)())}),GetBlockRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),transactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({transaction:ConfirmedTransactionResult,meta:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ConfirmedTransactionMetaResult),version:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(TransactionVersionStruct)})),rewards:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(RewardsResult)),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),blockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetNoneModeBlockRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),rewards:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(RewardsResult)),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),blockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetAccountsModeBlockRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),transactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({transaction:ConfirmedTransactionAccountsModeResult,meta:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ConfirmedTransactionMetaResult),version:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(TransactionVersionStruct)})),rewards:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(RewardsResult)),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),blockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetParsedBlockRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),transactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({transaction:ParsedConfirmedTransactionResult,meta:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ParsedConfirmedTransactionMetaResult),version:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(TransactionVersionStruct)})),rewards:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(RewardsResult)),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),blockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetParsedAccountsModeBlockRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),transactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({transaction:ConfirmedTransactionAccountsModeResult,meta:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ParsedConfirmedTransactionMetaResult),version:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(TransactionVersionStruct)})),rewards:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(RewardsResult)),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),blockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetParsedNoneModeBlockRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),rewards:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(RewardsResult)),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()),blockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetConfirmedBlockRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),transactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({transaction:ConfirmedTransactionResult,meta:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ConfirmedTransactionMetaResult)})),rewards:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(RewardsResult)),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetBlockSignaturesRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),previousBlockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),parentSlot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),signatures:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())}))),GetTransactionRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),meta:ConfirmedTransactionMetaResult,blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())),transaction:ConfirmedTransactionResult,version:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(TransactionVersionStruct)}))),GetParsedTransactionRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),transaction:ParsedConfirmedTransactionResult,meta:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ParsedConfirmedTransactionMetaResult),blockTime:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())),version:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)(TransactionVersionStruct)}))),GetRecentBlockhashAndContextRpcResult=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),feeCalculator:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({lamportsPerSignature:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})})),GetLatestBlockhashRpcResult=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({blockhash:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),lastValidBlockHeight:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})),PerfSampleResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({slot:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),numTransactions:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),numSlots:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)(),samplePeriodSecs:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),GetRecentPerformanceSamplesRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(PerfSampleResult)),GetFeeCalculatorRpcResult=jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({feeCalculator:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({lamportsPerSignature:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()})}))),RequestAirdropRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),SendTransactionRpcResult=jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),LogsResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({err:TransactionErrorResult,logs:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),signature:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()}),LogsNotificationResult=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({result:notificationResultAndContext(LogsResult),subscription:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()}),COMMON_HTTP_HEADERS={"solana-client":"js/0.0.0-development"};class Connection{constructor(endpoint,commitmentOrConfig){var client,client1;let wsEndpoint,httpHeaders,fetch,fetchMiddleware,disableRetryOnRateLimit,httpAgent;this._commitment=void 0,this._confirmTransactionInitialTimeout=void 0,this._rpcEndpoint=void 0,this._rpcWsEndpoint=void 0,this._rpcClient=void 0,this._rpcRequest=void 0,this._rpcBatchRequest=void 0,this._rpcWebSocket=void 0,this._rpcWebSocketConnected=!1,this._rpcWebSocketHeartbeat=null,this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketGeneration=0,this._disableBlockhashCaching=!1,this._pollingBlockhash=!1,this._blockhashInfo={latestBlockhash:null,lastFetch:0,transactionSignatures:[],simulatedSignatures:[]},this._nextClientSubscriptionId=0,this._subscriptionDisposeFunctionsByClientSubscriptionId={},this._subscriptionHashByClientSubscriptionId={},this._subscriptionStateChangeCallbacksByHash={},this._subscriptionCallbacksByServerSubscriptionId={},this._subscriptionsByHash={},this._subscriptionsAutoDisposedByRpc=new Set,commitmentOrConfig&&"string"==typeof commitmentOrConfig?this._commitment=commitmentOrConfig:commitmentOrConfig&&(this._commitment=commitmentOrConfig.commitment,this._confirmTransactionInitialTimeout=commitmentOrConfig.confirmTransactionInitialTimeout,wsEndpoint=commitmentOrConfig.wsEndpoint,httpHeaders=commitmentOrConfig.httpHeaders,fetch=commitmentOrConfig.fetch,fetchMiddleware=commitmentOrConfig.fetchMiddleware,disableRetryOnRateLimit=commitmentOrConfig.disableRetryOnRateLimit,httpAgent=commitmentOrConfig.httpAgent),this._rpcEndpoint=function(putativeUrl){if(!1===/^https?:/.test(putativeUrl))throw TypeError("Endpoint URL must start with `http:` or `https:`.");return putativeUrl}(endpoint),this._rpcWsEndpoint=wsEndpoint||function(endpoint){let matches=endpoint.match(URL_RE);if(null==matches)throw TypeError(`Failed to validate endpoint URL \`${endpoint}\``);let[_,hostish,portWithColon,rest]=matches,protocol=endpoint.startsWith("https:")?"wss:":"ws:",startPort=null==portWithColon?null:parseInt(portWithColon.slice(1),10),websocketPort=null==startPort?"":`:${startPort+1}`;return`${protocol}//${hostish}${websocketPort}${rest}`}(endpoint),this._rpcClient=function(url,httpHeaders,customFetch,fetchMiddleware,disableRetryOnRateLimit,httpAgent){let agent,fetchWithMiddleware;let fetch=customFetch||fetchImpl;null!=httpAgent&&console.warn("You have supplied an `httpAgent` when creating a `Connection` in a browser environment.It has been ignored; `httpAgent` is only used in Node environments."),fetchMiddleware&&(fetchWithMiddleware=async(info,init)=>{let modifiedFetchArgs=await new Promise((resolve,reject)=>{try{fetchMiddleware(info,init,(modifiedInfo,modifiedInit)=>resolve([modifiedInfo,modifiedInit]))}catch(error){reject(error)}});return await fetch(...modifiedFetchArgs)});let clientBrowser=new(jayson_lib_client_browser__WEBPACK_IMPORTED_MODULE_10___default())(async(request,callback)=>{let options={method:"POST",body:request,agent,headers:Object.assign({"Content-Type":"application/json"},httpHeaders||{},COMMON_HTTP_HEADERS)};try{let res,too_many_requests_retries=5,waitTime=500;for(;res=fetchWithMiddleware?await fetchWithMiddleware(url,options):await fetch(url,options),429===res.status&&!0!==disableRetryOnRateLimit&&(too_many_requests_retries-=1,0!==too_many_requests_retries);)console.log(`Server responded with ${res.status} ${res.statusText}.  Retrying after ${waitTime}ms delay...`),await sleep(waitTime),waitTime*=2;let text=await res.text();res.ok?callback(null,text):callback(Error(`${res.status} ${res.statusText}: ${text}`))}catch(err){err instanceof Error&&callback(err)}},{});return clientBrowser}(endpoint,httpHeaders,fetch,fetchMiddleware,disableRetryOnRateLimit,httpAgent),this._rpcRequest=(client=this._rpcClient,(method,args)=>new Promise((resolve,reject)=>{client.request(method,args,(err,response)=>{if(err){reject(err);return}resolve(response)})})),this._rpcBatchRequest=(client1=this._rpcClient,requests=>new Promise((resolve,reject)=>{0===requests.length&&resolve([]);let batch=requests.map(params=>client1.request(params.methodName,params.args));client1.request(batch,(err,response)=>{if(err){reject(err);return}resolve(response)})})),this._rpcWebSocket=new rpc_websockets__WEBPACK_IMPORTED_MODULE_9__.K(this._rpcWsEndpoint,{autoconnect:!1,max_reconnects:1/0}),this._rpcWebSocket.on("open",this._wsOnOpen.bind(this)),this._rpcWebSocket.on("error",this._wsOnError.bind(this)),this._rpcWebSocket.on("close",this._wsOnClose.bind(this)),this._rpcWebSocket.on("accountNotification",this._wsOnAccountNotification.bind(this)),this._rpcWebSocket.on("programNotification",this._wsOnProgramAccountNotification.bind(this)),this._rpcWebSocket.on("slotNotification",this._wsOnSlotNotification.bind(this)),this._rpcWebSocket.on("slotsUpdatesNotification",this._wsOnSlotUpdatesNotification.bind(this)),this._rpcWebSocket.on("signatureNotification",this._wsOnSignatureNotification.bind(this)),this._rpcWebSocket.on("rootNotification",this._wsOnRootNotification.bind(this)),this._rpcWebSocket.on("logsNotification",this._wsOnLogsNotification.bind(this))}get commitment(){return this._commitment}get rpcEndpoint(){return this._rpcEndpoint}async getBalanceAndContext(publicKey,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([publicKey.toBase58()],commitment,void 0,config),unsafeRes=await this._rpcRequest("getBalance",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get balance for ${publicKey.toBase58()}`);return res.result}async getBalance(publicKey,commitmentOrConfig){return await this.getBalanceAndContext(publicKey,commitmentOrConfig).then(x=>x.value).catch(e=>{throw Error("failed to get balance of account "+publicKey.toBase58()+": "+e)})}async getBlockTime(slot){let unsafeRes=await this._rpcRequest("getBlockTime",[slot]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get block time for slot ${slot}`);return res.result}async getMinimumLedgerSlot(){let unsafeRes=await this._rpcRequest("minimumLedgerSlot",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get minimum ledger slot");return res.result}async getFirstAvailableBlock(){let unsafeRes=await this._rpcRequest("getFirstAvailableBlock",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,SlotRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get first available block");return res.result}async getSupply(config){let configArg={};configArg="string"==typeof config?{commitment:config}:config?{...config,commitment:config&&config.commitment||this.commitment}:{commitment:this.commitment};let unsafeRes=await this._rpcRequest("getSupply",[configArg]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetSupplyRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get supply");return res.result}async getTokenSupply(tokenMintAddress,commitment){let args=this._buildArgs([tokenMintAddress.toBase58()],commitment),unsafeRes=await this._rpcRequest("getTokenSupply",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext(TokenAmountResult));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get token supply");return res.result}async getTokenAccountBalance(tokenAddress,commitment){let args=this._buildArgs([tokenAddress.toBase58()],commitment),unsafeRes=await this._rpcRequest("getTokenAccountBalance",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext(TokenAmountResult));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get token account balance");return res.result}async getTokenAccountsByOwner(ownerAddress,filter,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),_args=[ownerAddress.toBase58()];"mint"in filter?_args.push({mint:filter.mint.toBase58()}):_args.push({programId:filter.programId.toBase58()});let args=this._buildArgs(_args,commitment,"base64",config),unsafeRes=await this._rpcRequest("getTokenAccountsByOwner",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetTokenAccountsByOwner);if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get token accounts owned by account ${ownerAddress.toBase58()}`);return res.result}async getParsedTokenAccountsByOwner(ownerAddress,filter,commitment){let _args=[ownerAddress.toBase58()];"mint"in filter?_args.push({mint:filter.mint.toBase58()}):_args.push({programId:filter.programId.toBase58()});let args=this._buildArgs(_args,commitment,"jsonParsed"),unsafeRes=await this._rpcRequest("getTokenAccountsByOwner",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedTokenAccountsByOwner);if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get token accounts owned by account ${ownerAddress.toBase58()}`);return res.result}async getLargestAccounts(config){let arg={...config,commitment:config&&config.commitment||this.commitment},args=arg.filter||arg.commitment?[arg]:[],unsafeRes=await this._rpcRequest("getLargestAccounts",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetLargestAccountsRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get largest accounts");return res.result}async getTokenLargestAccounts(mintAddress,commitment){let args=this._buildArgs([mintAddress.toBase58()],commitment),unsafeRes=await this._rpcRequest("getTokenLargestAccounts",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetTokenLargestAccountsResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get token largest accounts");return res.result}async getAccountInfoAndContext(publicKey,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([publicKey.toBase58()],commitment,"base64",config),unsafeRes=await this._rpcRequest("getAccountInfo",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(AccountInfoResult)));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get info about account ${publicKey.toBase58()}`);return res.result}async getParsedAccountInfo(publicKey,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([publicKey.toBase58()],commitment,"jsonParsed",config),unsafeRes=await this._rpcRequest("getAccountInfo",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ParsedAccountInfoResult)));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get info about account ${publicKey.toBase58()}`);return res.result}async getAccountInfo(publicKey,commitmentOrConfig){try{let res=await this.getAccountInfoAndContext(publicKey,commitmentOrConfig);return res.value}catch(e){throw Error("failed to get info about account "+publicKey.toBase58()+": "+e)}}async getMultipleParsedAccounts(publicKeys,rawConfig){let{commitment,config}=extractCommitmentFromConfig(rawConfig),keys=publicKeys.map(key=>key.toBase58()),args=this._buildArgs([keys],commitment,"jsonParsed",config),unsafeRes=await this._rpcRequest("getMultipleAccounts",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(ParsedAccountInfoResult))));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get info for accounts ${keys}`);return res.result}async getMultipleAccountsInfoAndContext(publicKeys,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),keys=publicKeys.map(key=>key.toBase58()),args=this._buildArgs([keys],commitment,"base64",config),unsafeRes=await this._rpcRequest("getMultipleAccounts",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)(AccountInfoResult))));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get info for accounts ${keys}`);return res.result}async getMultipleAccountsInfo(publicKeys,commitmentOrConfig){let res=await this.getMultipleAccountsInfoAndContext(publicKeys,commitmentOrConfig);return res.value}async getStakeActivation(publicKey,commitmentOrConfig,epoch){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([publicKey.toBase58()],commitment,void 0,{...config,epoch:null!=epoch?epoch:null==config?void 0:config.epoch}),unsafeRes=await this._rpcRequest("getStakeActivation",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult(StakeActivationResult));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get Stake Activation ${publicKey.toBase58()}`);return res.result}async getProgramAccounts(programId,configOrCommitment){let{commitment,config}=extractCommitmentFromConfig(configOrCommitment),{encoding,...configWithoutEncoding}=config||{},args=this._buildArgs([programId.toBase58()],commitment,encoding||"base64",configWithoutEncoding),unsafeRes=await this._rpcRequest("getProgramAccounts",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(KeyedAccountInfoResult)));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get accounts owned by program ${programId.toBase58()}`);return res.result}async getParsedProgramAccounts(programId,configOrCommitment){let{commitment,config}=extractCommitmentFromConfig(configOrCommitment),args=this._buildArgs([programId.toBase58()],commitment,"jsonParsed",config),unsafeRes=await this._rpcRequest("getProgramAccounts",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(KeyedParsedAccountInfoResult)));if("error"in res)throw new SolanaJSONRPCError(res.error,`failed to get accounts owned by program ${programId.toBase58()}`);return res.result}async confirmTransaction(strategy,commitment){let rawSignature,decodedSignature;if("string"==typeof strategy)rawSignature=strategy;else{var _config$abortSignal;if(null!==(_config$abortSignal=strategy.abortSignal)&&void 0!==_config$abortSignal&&_config$abortSignal.aborted)return Promise.reject(strategy.abortSignal.reason);rawSignature=strategy.signature}try{decodedSignature=bs58__WEBPACK_IMPORTED_MODULE_4___default().decode(rawSignature)}catch(err){throw Error("signature must be base58 encoded: "+rawSignature)}return(assert(64===decodedSignature.length,"signature has invalid length"),"string"==typeof strategy)?await this.confirmTransactionUsingLegacyTimeoutStrategy({commitment:commitment||this.commitment,signature:rawSignature}):"lastValidBlockHeight"in strategy?await this.confirmTransactionUsingBlockHeightExceedanceStrategy({commitment:commitment||this.commitment,strategy}):await this.confirmTransactionUsingDurableNonceStrategy({commitment:commitment||this.commitment,strategy})}getCancellationPromise(signal){return new Promise((_,reject)=>{null!=signal&&(signal.aborted?reject(signal.reason):signal.addEventListener("abort",()=>{reject(signal.reason)}))})}getTransactionConfirmationPromise({commitment,signature}){let signatureSubscriptionId,disposeSignatureSubscriptionStateChangeObserver;let done=!1,confirmationPromise=new Promise((resolve,reject)=>{try{signatureSubscriptionId=this.onSignature(signature,(result,context)=>{signatureSubscriptionId=void 0,resolve({__type:TransactionStatus.PROCESSED,response:{context,value:result}})},commitment);let subscriptionSetupPromise=new Promise(resolveSubscriptionSetup=>{null==signatureSubscriptionId?resolveSubscriptionSetup():disposeSignatureSubscriptionStateChangeObserver=this._onSubscriptionStateChange(signatureSubscriptionId,nextState=>{"subscribed"===nextState&&resolveSubscriptionSetup()})});(async()=>{if(await subscriptionSetupPromise,done)return;let response=await this.getSignatureStatus(signature);if(done||null==response)return;let{context,value}=response;if(null!=value){if(null!=value&&value.err)reject(value.err);else{switch(commitment){case"confirmed":case"single":case"singleGossip":if("processed"===value.confirmationStatus)return;break;case"finalized":case"max":case"root":if("processed"===value.confirmationStatus||"confirmed"===value.confirmationStatus)return}done=!0,resolve({__type:TransactionStatus.PROCESSED,response:{context,value}})}}})()}catch(err){reject(err)}}),abortConfirmation=()=>{disposeSignatureSubscriptionStateChangeObserver&&(disposeSignatureSubscriptionStateChangeObserver(),disposeSignatureSubscriptionStateChangeObserver=void 0),null!=signatureSubscriptionId&&(this.removeSignatureListener(signatureSubscriptionId),signatureSubscriptionId=void 0)};return{abortConfirmation,confirmationPromise}}async confirmTransactionUsingBlockHeightExceedanceStrategy({commitment,strategy:{abortSignal,lastValidBlockHeight,signature}}){let result,done=!1,expiryPromise=new Promise(resolve=>{let checkBlockHeight=async()=>{try{let blockHeight=await this.getBlockHeight(commitment);return blockHeight}catch(_e){return -1}};(async()=>{let currentBlockHeight=await checkBlockHeight();if(!done){for(;currentBlockHeight<=lastValidBlockHeight;)if(await sleep(1e3),done||(currentBlockHeight=await checkBlockHeight(),done))return;resolve({__type:TransactionStatus.BLOCKHEIGHT_EXCEEDED})}})()}),{abortConfirmation,confirmationPromise}=this.getTransactionConfirmationPromise({commitment,signature}),cancellationPromise=this.getCancellationPromise(abortSignal);try{let outcome=await Promise.race([cancellationPromise,confirmationPromise,expiryPromise]);if(outcome.__type===TransactionStatus.PROCESSED)result=outcome.response;else throw new TransactionExpiredBlockheightExceededError(signature)}finally{done=!0,abortConfirmation()}return result}async confirmTransactionUsingDurableNonceStrategy({commitment,strategy:{abortSignal,minContextSlot,nonceAccountPubkey,nonceValue,signature}}){let result,done=!1,expiryPromise=new Promise(resolve=>{let currentNonceValue=nonceValue,lastCheckedSlot=null,getCurrentNonceValue=async()=>{try{let{context,value:nonceAccount}=await this.getNonceAndContext(nonceAccountPubkey,{commitment,minContextSlot});return lastCheckedSlot=context.slot,null==nonceAccount?void 0:nonceAccount.nonce}catch(e){return currentNonceValue}};(async()=>{if(currentNonceValue=await getCurrentNonceValue(),!done)for(;;){if(nonceValue!==currentNonceValue){resolve({__type:TransactionStatus.NONCE_INVALID,slotInWhichNonceDidAdvance:lastCheckedSlot});return}if(await sleep(2e3),done||(currentNonceValue=await getCurrentNonceValue(),done))return}})()}),{abortConfirmation,confirmationPromise}=this.getTransactionConfirmationPromise({commitment,signature}),cancellationPromise=this.getCancellationPromise(abortSignal);try{let outcome=await Promise.race([cancellationPromise,confirmationPromise,expiryPromise]);if(outcome.__type===TransactionStatus.PROCESSED)result=outcome.response;else{var _signatureStatus,_outcome$slotInWhichN;let signatureStatus;for(;;){let status=await this.getSignatureStatus(signature);if(null==status)break;if(status.context.slot<(null!==(_outcome$slotInWhichN=outcome.slotInWhichNonceDidAdvance)&&void 0!==_outcome$slotInWhichN?_outcome$slotInWhichN:minContextSlot)){await sleep(400);continue}signatureStatus=status;break}if(null!==(_signatureStatus=signatureStatus)&&void 0!==_signatureStatus&&_signatureStatus.value){let{confirmationStatus}=signatureStatus.value;switch(commitment||"finalized"){case"processed":case"recent":if("processed"!==confirmationStatus&&"confirmed"!==confirmationStatus&&"finalized"!==confirmationStatus)throw new TransactionExpiredNonceInvalidError(signature);break;case"confirmed":case"single":case"singleGossip":if("confirmed"!==confirmationStatus&&"finalized"!==confirmationStatus)throw new TransactionExpiredNonceInvalidError(signature);break;case"finalized":case"max":case"root":if("finalized"!==confirmationStatus)throw new TransactionExpiredNonceInvalidError(signature)}result={context:signatureStatus.context,value:{err:signatureStatus.value.err}}}else throw new TransactionExpiredNonceInvalidError(signature)}}finally{done=!0,abortConfirmation()}return result}async confirmTransactionUsingLegacyTimeoutStrategy({commitment,signature}){let timeoutId,result;let expiryPromise=new Promise(resolve=>{let timeoutMs=this._confirmTransactionInitialTimeout||6e4;switch(commitment){case"processed":case"recent":case"single":case"confirmed":case"singleGossip":timeoutMs=this._confirmTransactionInitialTimeout||3e4}timeoutId=setTimeout(()=>resolve({__type:TransactionStatus.TIMED_OUT,timeoutMs}),timeoutMs)}),{abortConfirmation,confirmationPromise}=this.getTransactionConfirmationPromise({commitment,signature});try{let outcome=await Promise.race([confirmationPromise,expiryPromise]);if(outcome.__type===TransactionStatus.PROCESSED)result=outcome.response;else throw new TransactionExpiredTimeoutError(signature,outcome.timeoutMs/1e3)}finally{clearTimeout(timeoutId),abortConfirmation()}return result}async getClusterNodes(){let unsafeRes=await this._rpcRequest("getClusterNodes",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(ContactInfoResult)));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get cluster nodes");return res.result}async getVoteAccounts(commitment){let args=this._buildArgs([],commitment),unsafeRes=await this._rpcRequest("getVoteAccounts",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetVoteAccounts);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get vote accounts");return res.result}async getSlot(commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([],commitment,void 0,config),unsafeRes=await this._rpcRequest("getSlot",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get slot");return res.result}async getSlotLeader(commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([],commitment,void 0,config),unsafeRes=await this._rpcRequest("getSlotLeader",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get slot leader");return res.result}async getSlotLeaders(startSlot,limit){let unsafeRes=await this._rpcRequest("getSlotLeaders",[startSlot,limit]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)(PublicKeyFromString)));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get slot leaders");return res.result}async getSignatureStatus(signature,config){let{context,value:values}=await this.getSignatureStatuses([signature],config);assert(1===values.length);let value=values[0];return{context,value}}async getSignatureStatuses(signatures,config){let params=[signatures];config&&params.push(config);let unsafeRes=await this._rpcRequest("getSignatureStatuses",params),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetSignatureStatusesRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get signature status");return res.result}async getTransactionCount(commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([],commitment,void 0,config),unsafeRes=await this._rpcRequest("getTransactionCount",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get transaction count");return res.result}async getTotalSupply(commitment){let result=await this.getSupply({commitment,excludeNonCirculatingAccountsList:!0});return result.value.total}async getInflationGovernor(commitment){let args=this._buildArgs([],commitment),unsafeRes=await this._rpcRequest("getInflationGovernor",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetInflationGovernorRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get inflation");return res.result}async getInflationReward(addresses,epoch,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([addresses.map(pubkey=>pubkey.toBase58())],commitment,void 0,{...config,epoch:null!=epoch?epoch:null==config?void 0:config.epoch}),unsafeRes=await this._rpcRequest("getInflationReward",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetInflationRewardResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get inflation reward");return res.result}async getInflationRate(){let unsafeRes=await this._rpcRequest("getInflationRate",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetInflationRateRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get inflation rate");return res.result}async getEpochInfo(commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([],commitment,void 0,config),unsafeRes=await this._rpcRequest("getEpochInfo",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetEpochInfoRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get epoch info");return res.result}async getEpochSchedule(){let unsafeRes=await this._rpcRequest("getEpochSchedule",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetEpochScheduleRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get epoch schedule");let epochSchedule=res.result;return new EpochSchedule(epochSchedule.slotsPerEpoch,epochSchedule.leaderScheduleSlotOffset,epochSchedule.warmup,epochSchedule.firstNormalEpoch,epochSchedule.firstNormalSlot)}async getLeaderSchedule(){let unsafeRes=await this._rpcRequest("getLeaderSchedule",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetLeaderScheduleRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get leader schedule");return res.result}async getMinimumBalanceForRentExemption(dataLength,commitment){let args=this._buildArgs([dataLength],commitment),unsafeRes=await this._rpcRequest("getMinimumBalanceForRentExemption",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetMinimumBalanceForRentExemptionRpcResult);return"error"in res?(console.warn("Unable to fetch minimum balance for rent exemption"),0):res.result}async getRecentBlockhashAndContext(commitment){let args=this._buildArgs([],commitment),unsafeRes=await this._rpcRequest("getRecentBlockhash",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetRecentBlockhashAndContextRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get recent blockhash");return res.result}async getRecentPerformanceSamples(limit){let unsafeRes=await this._rpcRequest("getRecentPerformanceSamples",limit?[limit]:[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetRecentPerformanceSamplesRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get recent performance samples");return res.result}async getFeeCalculatorForBlockhash(blockhash,commitment){let args=this._buildArgs([blockhash],commitment),unsafeRes=await this._rpcRequest("getFeeCalculatorForBlockhash",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetFeeCalculatorRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get fee calculator");let{context,value}=res.result;return{context,value:null!==value?value.feeCalculator:null}}async getFeeForMessage(message,commitment){let wireMessage=toBuffer(message.serialize()).toString("base64"),args=this._buildArgs([wireMessage],commitment),unsafeRes=await this._rpcRequest("getFeeForMessage",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.AG)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get fee for message");if(null===res.result)throw Error("invalid blockhash");return res.result}async getRecentBlockhash(commitment){try{let res=await this.getRecentBlockhashAndContext(commitment);return res.value}catch(e){throw Error("failed to get recent blockhash: "+e)}}async getLatestBlockhash(commitmentOrConfig){try{let res=await this.getLatestBlockhashAndContext(commitmentOrConfig);return res.value}catch(e){throw Error("failed to get recent blockhash: "+e)}}async getLatestBlockhashAndContext(commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([],commitment,void 0,config),unsafeRes=await this._rpcRequest("getLatestBlockhash",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetLatestBlockhashRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get latest blockhash");return res.result}async getVersion(){let unsafeRes=await this._rpcRequest("getVersion",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult(VersionResult));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get version");return res.result}async getGenesisHash(){let unsafeRes=await this._rpcRequest("getGenesisHash",[]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get genesis hash");return res.result}async getBlock(slot,rawConfig){let{commitment,config}=extractCommitmentFromConfig(rawConfig),args=this._buildArgsAtLeastConfirmed([slot],commitment,void 0,config),unsafeRes=await this._rpcRequest("getBlock",args);try{switch(null==config?void 0:config.transactionDetails){case"accounts":{let res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetAccountsModeBlockRpcResult);if("error"in res)throw res.error;return res.result}case"none":{let res1=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetNoneModeBlockRpcResult);if("error"in res1)throw res1.error;return res1.result}default:{let res2=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetBlockRpcResult);if("error"in res2)throw res2.error;let{result}=res2;return result?{...result,transactions:result.transactions.map(({transaction,meta,version})=>({meta,transaction:{...transaction,message:versionedMessageFromResponse(version,transaction.message)},version}))}:null}}}catch(e){throw new SolanaJSONRPCError(e,"failed to get confirmed block")}}async getParsedBlock(slot,rawConfig){let{commitment,config}=extractCommitmentFromConfig(rawConfig),args=this._buildArgsAtLeastConfirmed([slot],commitment,"jsonParsed",config),unsafeRes=await this._rpcRequest("getBlock",args);try{switch(null==config?void 0:config.transactionDetails){case"accounts":{let res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedAccountsModeBlockRpcResult);if("error"in res)throw res.error;return res.result}case"none":{let res1=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedNoneModeBlockRpcResult);if("error"in res1)throw res1.error;return res1.result}default:{let res2=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedBlockRpcResult);if("error"in res2)throw res2.error;return res2.result}}}catch(e){throw new SolanaJSONRPCError(e,"failed to get block")}}async getBlockHeight(commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgs([],commitment,void 0,config),unsafeRes=await this._rpcRequest("getBlockHeight",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get block height information");return res.result}async getBlockProduction(configOrCommitment){let extra,commitment;if("string"==typeof configOrCommitment)commitment=configOrCommitment;else if(configOrCommitment){let{commitment:c,...rest}=configOrCommitment;commitment=c,extra=rest}let args=this._buildArgs([],commitment,"base64",extra),unsafeRes=await this._rpcRequest("getBlockProduction",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,BlockProductionResponseStruct);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get block production information");return res.result}async getTransaction(signature,rawConfig){let{commitment,config}=extractCommitmentFromConfig(rawConfig),args=this._buildArgsAtLeastConfirmed([signature],commitment,void 0,config),unsafeRes=await this._rpcRequest("getTransaction",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetTransactionRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get transaction");let result=res.result;return result?{...result,transaction:{...result.transaction,message:versionedMessageFromResponse(result.version,result.transaction.message)}}:result}async getParsedTransaction(signature,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),args=this._buildArgsAtLeastConfirmed([signature],commitment,"jsonParsed",config),unsafeRes=await this._rpcRequest("getTransaction",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedTransactionRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get transaction");return res.result}async getParsedTransactions(signatures,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),batch=signatures.map(signature=>{let args=this._buildArgsAtLeastConfirmed([signature],commitment,"jsonParsed",config);return{methodName:"getTransaction",args}}),unsafeRes=await this._rpcBatchRequest(batch),res=unsafeRes.map(unsafeRes=>{let res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedTransactionRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get transactions");return res.result});return res}async getTransactions(signatures,commitmentOrConfig){let{commitment,config}=extractCommitmentFromConfig(commitmentOrConfig),batch=signatures.map(signature=>{let args=this._buildArgsAtLeastConfirmed([signature],commitment,void 0,config);return{methodName:"getTransaction",args}}),unsafeRes=await this._rpcBatchRequest(batch),res=unsafeRes.map(unsafeRes=>{let res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetTransactionRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get transactions");let result=res.result;return result?{...result,transaction:{...result.transaction,message:versionedMessageFromResponse(result.version,result.transaction.message)}}:result});return res}async getConfirmedBlock(slot,commitment){let args=this._buildArgsAtLeastConfirmed([slot],commitment),unsafeRes=await this._rpcRequest("getConfirmedBlock",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetConfirmedBlockRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get confirmed block");let result=res.result;if(!result)throw Error("Confirmed block "+slot+" not found");let block={...result,transactions:result.transactions.map(({transaction,meta})=>{let message=new Message(transaction.message);return{meta,transaction:{...transaction,message}}})};return{...block,transactions:block.transactions.map(({transaction,meta})=>({meta,transaction:Transaction.populate(transaction.message,transaction.signatures)}))}}async getBlocks(startSlot,endSlot,commitment){let args=this._buildArgsAtLeastConfirmed(void 0!==endSlot?[startSlot,endSlot]:[startSlot],commitment),unsafeRes=await this._rpcRequest("getBlocks",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResult((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.IX)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)())));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get blocks");return res.result}async getBlockSignatures(slot,commitment){let args=this._buildArgsAtLeastConfirmed([slot],commitment,void 0,{transactionDetails:"signatures",rewards:!1}),unsafeRes=await this._rpcRequest("getBlock",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetBlockSignaturesRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get block");let result=res.result;if(!result)throw Error("Block "+slot+" not found");return result}async getConfirmedBlockSignatures(slot,commitment){let args=this._buildArgsAtLeastConfirmed([slot],commitment,void 0,{transactionDetails:"signatures",rewards:!1}),unsafeRes=await this._rpcRequest("getConfirmedBlock",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetBlockSignaturesRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get confirmed block");let result=res.result;if(!result)throw Error("Confirmed block "+slot+" not found");return result}async getConfirmedTransaction(signature,commitment){let args=this._buildArgsAtLeastConfirmed([signature],commitment),unsafeRes=await this._rpcRequest("getConfirmedTransaction",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetTransactionRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get transaction");let result=res.result;if(!result)return result;let message=new Message(result.transaction.message),signatures=result.transaction.signatures;return{...result,transaction:Transaction.populate(message,signatures)}}async getParsedConfirmedTransaction(signature,commitment){let args=this._buildArgsAtLeastConfirmed([signature],commitment,"jsonParsed"),unsafeRes=await this._rpcRequest("getConfirmedTransaction",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedTransactionRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get confirmed transaction");return res.result}async getParsedConfirmedTransactions(signatures,commitment){let batch=signatures.map(signature=>{let args=this._buildArgsAtLeastConfirmed([signature],commitment,"jsonParsed");return{methodName:"getConfirmedTransaction",args}}),unsafeRes=await this._rpcBatchRequest(batch),res=unsafeRes.map(unsafeRes=>{let res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetParsedTransactionRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get confirmed transactions");return res.result});return res}async getConfirmedSignaturesForAddress(address,startSlot,endSlot){let options={},firstAvailableBlock=await this.getFirstAvailableBlock();for(;!("until"in options)&&!(--startSlot<=0)&&!(startSlot<firstAvailableBlock);)try{let block=await this.getConfirmedBlockSignatures(startSlot,"finalized");block.signatures.length>0&&(options.until=block.signatures[block.signatures.length-1].toString())}catch(err){if(err instanceof Error&&err.message.includes("skipped"))continue;throw err}let highestConfirmedRoot=await this.getSlot("finalized");for(;!("before"in options)&&!(++endSlot>highestConfirmedRoot);)try{let block1=await this.getConfirmedBlockSignatures(endSlot);block1.signatures.length>0&&(options.before=block1.signatures[block1.signatures.length-1].toString())}catch(err1){if(err1 instanceof Error&&err1.message.includes("skipped"))continue;throw err1}let confirmedSignatureInfo=await this.getConfirmedSignaturesForAddress2(address,options);return confirmedSignatureInfo.map(info=>info.signature)}async getConfirmedSignaturesForAddress2(address,options,commitment){let args=this._buildArgsAtLeastConfirmed([address.toBase58()],commitment,void 0,options),unsafeRes=await this._rpcRequest("getConfirmedSignaturesForAddress2",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetConfirmedSignaturesForAddress2RpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get confirmed signatures for address");return res.result}async getSignaturesForAddress(address,options,commitment){let args=this._buildArgsAtLeastConfirmed([address.toBase58()],commitment,void 0,options),unsafeRes=await this._rpcRequest("getSignaturesForAddress",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,GetSignaturesForAddressRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get signatures for address");return res.result}async getAddressLookupTable(accountKey,config){let{context,value:accountInfo}=await this.getAccountInfoAndContext(accountKey,config),value=null;return null!==accountInfo&&(value=new AddressLookupTableAccount({key:accountKey,state:AddressLookupTableAccount.deserialize(accountInfo.data)})),{context,value}}async getNonceAndContext(nonceAccount,commitmentOrConfig){let{context,value:accountInfo}=await this.getAccountInfoAndContext(nonceAccount,commitmentOrConfig),value=null;return null!==accountInfo&&(value=NonceAccount.fromAccountData(accountInfo.data)),{context,value}}async getNonce(nonceAccount,commitmentOrConfig){return await this.getNonceAndContext(nonceAccount,commitmentOrConfig).then(x=>x.value).catch(e=>{throw Error("failed to get nonce for account "+nonceAccount.toBase58()+": "+e)})}async requestAirdrop(to,lamports){let unsafeRes=await this._rpcRequest("requestAirdrop",[to.toBase58(),lamports]),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,RequestAirdropRpcResult);if("error"in res)throw new SolanaJSONRPCError(res.error,`airdrop to ${to.toBase58()} failed`);return res.result}async _blockhashWithExpiryBlockHeight(disableCache){if(!disableCache){for(;this._pollingBlockhash;)await sleep(100);let timeSinceFetch=Date.now()-this._blockhashInfo.lastFetch;if(null!==this._blockhashInfo.latestBlockhash&&!(timeSinceFetch>=3e4))return this._blockhashInfo.latestBlockhash}return await this._pollNewBlockhash()}async _pollNewBlockhash(){this._pollingBlockhash=!0;try{let startTime=Date.now(),cachedLatestBlockhash=this._blockhashInfo.latestBlockhash,cachedBlockhash=cachedLatestBlockhash?cachedLatestBlockhash.blockhash:null;for(let i=0;i<50;i++){let latestBlockhash=await this.getLatestBlockhash("finalized");if(cachedBlockhash!==latestBlockhash.blockhash)return this._blockhashInfo={latestBlockhash,lastFetch:Date.now(),transactionSignatures:[],simulatedSignatures:[]},latestBlockhash;await sleep(200)}throw Error(`Unable to obtain a new blockhash after ${Date.now()-startTime}ms`)}finally{this._pollingBlockhash=!1}}async getStakeMinimumDelegation(config){let{commitment,config:configArg}=extractCommitmentFromConfig(config),args=this._buildArgs([],commitment,"base64",configArg),unsafeRes=await this._rpcRequest("getStakeMinimumDelegation",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,jsonRpcResultAndContext((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Rx)()));if("error"in res)throw new SolanaJSONRPCError(res.error,"failed to get stake minimum delegation");return res.result}async simulateTransaction(transactionOrMessage,configOrSigners,includeAccounts){let transaction;if("message"in transactionOrMessage){let wireTransaction=transactionOrMessage.serialize(),encodedTransaction=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(wireTransaction).toString("base64");if(Array.isArray(configOrSigners)||void 0!==includeAccounts)throw Error("Invalid arguments");let config=configOrSigners||{};config.encoding="base64","commitment"in config||(config.commitment=this.commitment);let args=[encodedTransaction,config],unsafeRes=await this._rpcRequest("simulateTransaction",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,SimulatedTransactionResponseStruct);if("error"in res)throw Error("failed to simulate transaction: "+res.error.message);return res.result}if(transactionOrMessage instanceof Transaction?((transaction=new Transaction).feePayer=transactionOrMessage.feePayer,transaction.instructions=transactionOrMessage.instructions,transaction.nonceInfo=transactionOrMessage.nonceInfo,transaction.signatures=transactionOrMessage.signatures):(transaction=Transaction.populate(transactionOrMessage))._message=transaction._json=void 0,void 0!==configOrSigners&&!Array.isArray(configOrSigners))throw Error("Invalid arguments");if(transaction.nonceInfo&&configOrSigners)transaction.sign(...configOrSigners);else{let disableCache=this._disableBlockhashCaching;for(;;){let latestBlockhash=await this._blockhashWithExpiryBlockHeight(disableCache);if(transaction.lastValidBlockHeight=latestBlockhash.lastValidBlockHeight,transaction.recentBlockhash=latestBlockhash.blockhash,!configOrSigners)break;if(transaction.sign(...configOrSigners),!transaction.signature)throw Error("!signature");let signature=transaction.signature.toString("base64");if(this._blockhashInfo.simulatedSignatures.includes(signature)||this._blockhashInfo.transactionSignatures.includes(signature))disableCache=!0;else{this._blockhashInfo.simulatedSignatures.push(signature);break}}}let message=transaction._compile(),signData=message.serialize(),wireTransaction1=transaction._serialize(signData),encodedTransaction1=wireTransaction1.toString("base64"),config1={encoding:"base64",commitment:this.commitment};if(includeAccounts){let addresses=(Array.isArray(includeAccounts)?includeAccounts:message.nonProgramIds()).map(key=>key.toBase58());config1.accounts={encoding:"base64",addresses}}configOrSigners&&(config1.sigVerify=!0);let args1=[encodedTransaction1,config1],unsafeRes1=await this._rpcRequest("simulateTransaction",args1),res1=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes1,SimulatedTransactionResponseStruct);if("error"in res1){let logs;if("data"in res1.error&&(logs=res1.error.data.logs)&&Array.isArray(logs)){let traceIndent="\n    ",logTrace=traceIndent+logs.join(traceIndent);console.error(res1.error.message,logTrace)}throw new SendTransactionError("failed to simulate transaction: "+res1.error.message,logs)}return res1.result}async sendTransaction(transaction,signersOrOptions,options){if("version"in transaction){if(signersOrOptions&&Array.isArray(signersOrOptions))throw Error("Invalid arguments");let wireTransaction=transaction.serialize();return await this.sendRawTransaction(wireTransaction,options)}if(void 0===signersOrOptions||!Array.isArray(signersOrOptions))throw Error("Invalid arguments");if(transaction.nonceInfo)transaction.sign(...signersOrOptions);else{let disableCache=this._disableBlockhashCaching;for(;;){let latestBlockhash=await this._blockhashWithExpiryBlockHeight(disableCache);if(transaction.lastValidBlockHeight=latestBlockhash.lastValidBlockHeight,transaction.recentBlockhash=latestBlockhash.blockhash,transaction.sign(...signersOrOptions),!transaction.signature)throw Error("!signature");let signature=transaction.signature.toString("base64");if(this._blockhashInfo.transactionSignatures.includes(signature))disableCache=!0;else{this._blockhashInfo.transactionSignatures.push(signature);break}}}let wireTransaction1=transaction.serialize();return await this.sendRawTransaction(wireTransaction1,options)}async sendRawTransaction(rawTransaction,options){let encodedTransaction=toBuffer(rawTransaction).toString("base64"),result=await this.sendEncodedTransaction(encodedTransaction,options);return result}async sendEncodedTransaction(encodedTransaction,options){let config={encoding:"base64"},skipPreflight=options&&options.skipPreflight,preflightCommitment=options&&options.preflightCommitment||this.commitment;options&&null!=options.maxRetries&&(config.maxRetries=options.maxRetries),options&&null!=options.minContextSlot&&(config.minContextSlot=options.minContextSlot),skipPreflight&&(config.skipPreflight=skipPreflight),preflightCommitment&&(config.preflightCommitment=preflightCommitment);let args=[encodedTransaction,config],unsafeRes=await this._rpcRequest("sendTransaction",args),res=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(unsafeRes,SendTransactionRpcResult);if("error"in res){let logs;throw"data"in res.error&&(logs=res.error.data.logs),new SendTransactionError("failed to send transaction: "+res.error.message,logs)}return res.result}_wsOnOpen(){this._rpcWebSocketConnected=!0,this._rpcWebSocketHeartbeat=setInterval(()=>{this._rpcWebSocket.notify("ping").catch(()=>{})},5e3),this._updateSubscriptions()}_wsOnError(err){this._rpcWebSocketConnected=!1,console.error("ws error:",err.message)}_wsOnClose(code){if(this._rpcWebSocketConnected=!1,this._rpcWebSocketGeneration=(this._rpcWebSocketGeneration+1)%Number.MAX_SAFE_INTEGER,this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null),this._rpcWebSocketHeartbeat&&(clearInterval(this._rpcWebSocketHeartbeat),this._rpcWebSocketHeartbeat=null),1e3===code){this._updateSubscriptions();return}this._subscriptionCallbacksByServerSubscriptionId={},Object.entries(this._subscriptionsByHash).forEach(([hash,subscription])=>{this._setSubscription(hash,{...subscription,state:"pending"})})}_setSubscription(hash,nextSubscription){var _this$_subscriptionsB;let prevState=null===(_this$_subscriptionsB=this._subscriptionsByHash[hash])||void 0===_this$_subscriptionsB?void 0:_this$_subscriptionsB.state;if(this._subscriptionsByHash[hash]=nextSubscription,prevState!==nextSubscription.state){let stateChangeCallbacks=this._subscriptionStateChangeCallbacksByHash[hash];stateChangeCallbacks&&stateChangeCallbacks.forEach(cb=>{try{cb(nextSubscription.state)}catch{}})}}_onSubscriptionStateChange(clientSubscriptionId,callback){var _this$_subscriptionSt;let hash=this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];if(null==hash)return()=>{};let stateChangeCallbacks=(_this$_subscriptionSt=this._subscriptionStateChangeCallbacksByHash)[hash]||(_this$_subscriptionSt[hash]=new Set);return stateChangeCallbacks.add(callback),()=>{stateChangeCallbacks.delete(callback),0===stateChangeCallbacks.size&&delete this._subscriptionStateChangeCallbacksByHash[hash]}}async _updateSubscriptions(){if(0===Object.keys(this._subscriptionsByHash).length){this._rpcWebSocketConnected&&(this._rpcWebSocketConnected=!1,this._rpcWebSocketIdleTimeout=setTimeout(()=>{this._rpcWebSocketIdleTimeout=null;try{this._rpcWebSocket.close()}catch(err){err instanceof Error&&console.log(`Error when closing socket connection: ${err.message}`)}},500));return}if(null!==this._rpcWebSocketIdleTimeout&&(clearTimeout(this._rpcWebSocketIdleTimeout),this._rpcWebSocketIdleTimeout=null,this._rpcWebSocketConnected=!0),!this._rpcWebSocketConnected){this._rpcWebSocket.connect();return}let activeWebSocketGeneration=this._rpcWebSocketGeneration,isCurrentConnectionStillActive=()=>activeWebSocketGeneration===this._rpcWebSocketGeneration;await Promise.all(Object.keys(this._subscriptionsByHash).map(async hash=>{let subscription=this._subscriptionsByHash[hash];if(void 0!==subscription)switch(subscription.state){case"pending":case"unsubscribed":if(0===subscription.callbacks.size){delete this._subscriptionsByHash[hash],"unsubscribed"===subscription.state&&delete this._subscriptionCallbacksByServerSubscriptionId[subscription.serverSubscriptionId],await this._updateSubscriptions();return}await (async()=>{let{args,method}=subscription;try{this._setSubscription(hash,{...subscription,state:"subscribing"});let serverSubscriptionId=await this._rpcWebSocket.call(method,args);this._setSubscription(hash,{...subscription,serverSubscriptionId,state:"subscribed"}),this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId]=subscription.callbacks,await this._updateSubscriptions()}catch(e){if(e instanceof Error&&console.error(`${method} error for argument`,args,e.message),!isCurrentConnectionStillActive())return;this._setSubscription(hash,{...subscription,state:"pending"}),await this._updateSubscriptions()}})();break;case"subscribed":0===subscription.callbacks.size&&await (async()=>{let{serverSubscriptionId,unsubscribeMethod}=subscription;if(this._subscriptionsAutoDisposedByRpc.has(serverSubscriptionId))this._subscriptionsAutoDisposedByRpc.delete(serverSubscriptionId);else{this._setSubscription(hash,{...subscription,state:"unsubscribing"}),this._setSubscription(hash,{...subscription,state:"unsubscribing"});try{await this._rpcWebSocket.call(unsubscribeMethod,[serverSubscriptionId])}catch(e){if(e instanceof Error&&console.error(`${unsubscribeMethod} error:`,e.message),!isCurrentConnectionStillActive())return;this._setSubscription(hash,{...subscription,state:"subscribed"}),await this._updateSubscriptions();return}}this._setSubscription(hash,{...subscription,state:"unsubscribed"}),await this._updateSubscriptions()})()}}))}_handleServerNotification(serverSubscriptionId,callbackArgs){let callbacks=this._subscriptionCallbacksByServerSubscriptionId[serverSubscriptionId];void 0!==callbacks&&callbacks.forEach(cb=>{try{cb(...callbackArgs)}catch(e){console.error(e)}})}_wsOnAccountNotification(notification){let{result,subscription}=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(notification,AccountNotificationResult);this._handleServerNotification(subscription,[result.value,result.context])}_makeSubscription(subscriptionConfig,args){let clientSubscriptionId=this._nextClientSubscriptionId++,hash=fastStableStringify$1([subscriptionConfig.method,args],!0),existingSubscription=this._subscriptionsByHash[hash];return void 0===existingSubscription?this._subscriptionsByHash[hash]={...subscriptionConfig,args,callbacks:new Set([subscriptionConfig.callback]),state:"pending"}:existingSubscription.callbacks.add(subscriptionConfig.callback),this._subscriptionHashByClientSubscriptionId[clientSubscriptionId]=hash,this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId]=async()=>{delete this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId],delete this._subscriptionHashByClientSubscriptionId[clientSubscriptionId];let subscription=this._subscriptionsByHash[hash];assert(void 0!==subscription,`Could not find a \`Subscription\` when tearing down client subscription #${clientSubscriptionId}`),subscription.callbacks.delete(subscriptionConfig.callback),await this._updateSubscriptions()},this._updateSubscriptions(),clientSubscriptionId}onAccountChange(publicKey,callback,commitment){let args=this._buildArgs([publicKey.toBase58()],commitment||this._commitment||"finalized","base64");return this._makeSubscription({callback,method:"accountSubscribe",unsubscribeMethod:"accountUnsubscribe"},args)}async removeAccountChangeListener(clientSubscriptionId){await this._unsubscribeClientSubscription(clientSubscriptionId,"account change")}_wsOnProgramAccountNotification(notification){let{result,subscription}=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(notification,ProgramAccountNotificationResult);this._handleServerNotification(subscription,[{accountId:result.value.pubkey,accountInfo:result.value.account},result.context])}onProgramAccountChange(programId,callback,commitment,filters){let args=this._buildArgs([programId.toBase58()],commitment||this._commitment||"finalized","base64",filters?{filters:filters}:void 0);return this._makeSubscription({callback,method:"programSubscribe",unsubscribeMethod:"programUnsubscribe"},args)}async removeProgramAccountChangeListener(clientSubscriptionId){await this._unsubscribeClientSubscription(clientSubscriptionId,"program account change")}onLogs(filter,callback,commitment){let args=this._buildArgs(["object"==typeof filter?{mentions:[filter.toString()]}:filter],commitment||this._commitment||"finalized");return this._makeSubscription({callback,method:"logsSubscribe",unsubscribeMethod:"logsUnsubscribe"},args)}async removeOnLogsListener(clientSubscriptionId){await this._unsubscribeClientSubscription(clientSubscriptionId,"logs")}_wsOnLogsNotification(notification){let{result,subscription}=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(notification,LogsNotificationResult);this._handleServerNotification(subscription,[result.value,result.context])}_wsOnSlotNotification(notification){let{result,subscription}=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(notification,SlotNotificationResult);this._handleServerNotification(subscription,[result])}onSlotChange(callback){return this._makeSubscription({callback,method:"slotSubscribe",unsubscribeMethod:"slotUnsubscribe"},[])}async removeSlotChangeListener(clientSubscriptionId){await this._unsubscribeClientSubscription(clientSubscriptionId,"slot change")}_wsOnSlotUpdatesNotification(notification){let{result,subscription}=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(notification,SlotUpdateNotificationResult);this._handleServerNotification(subscription,[result])}onSlotUpdate(callback){return this._makeSubscription({callback,method:"slotsUpdatesSubscribe",unsubscribeMethod:"slotsUpdatesUnsubscribe"},[])}async removeSlotUpdateListener(clientSubscriptionId){await this._unsubscribeClientSubscription(clientSubscriptionId,"slot update")}async _unsubscribeClientSubscription(clientSubscriptionId,subscriptionName){let dispose=this._subscriptionDisposeFunctionsByClientSubscriptionId[clientSubscriptionId];dispose?await dispose():console.warn(`Ignored unsubscribe request because an active subscription with id \`${clientSubscriptionId}\` for '${subscriptionName}' events could not be found.`)}_buildArgs(args,override,encoding,extra){let commitment=override||this._commitment;if(commitment||encoding||extra){let options={};encoding&&(options.encoding=encoding),commitment&&(options.commitment=commitment),extra&&(options=Object.assign(options,extra)),args.push(options)}return args}_buildArgsAtLeastConfirmed(args,override,encoding,extra){let commitment=override||this._commitment;if(commitment&&!["confirmed","finalized"].includes(commitment))throw Error("Using Connection with default commitment: `"+this._commitment+"`, but method requires at least `confirmed`");return this._buildArgs(args,override,encoding,extra)}_wsOnSignatureNotification(notification){let{result,subscription}=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(notification,SignatureNotificationResult);"receivedSignature"!==result.value&&this._subscriptionsAutoDisposedByRpc.add(subscription),this._handleServerNotification(subscription,"receivedSignature"===result.value?[{type:"received"},result.context]:[{type:"status",result:result.value},result.context])}onSignature(signature,callback,commitment){let args=this._buildArgs([signature],commitment||this._commitment||"finalized"),clientSubscriptionId=this._makeSubscription({callback:(notification,context)=>{if("status"===notification.type){callback(notification.result,context);try{this.removeSignatureListener(clientSubscriptionId)}catch(_err){}}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},args);return clientSubscriptionId}onSignatureWithOptions(signature,callback,options){let{commitment,...extra}={...options,commitment:options&&options.commitment||this._commitment||"finalized"},args=this._buildArgs([signature],commitment,void 0,extra),clientSubscriptionId=this._makeSubscription({callback:(notification,context)=>{callback(notification,context);try{this.removeSignatureListener(clientSubscriptionId)}catch(_err){}},method:"signatureSubscribe",unsubscribeMethod:"signatureUnsubscribe"},args);return clientSubscriptionId}async removeSignatureListener(clientSubscriptionId){await this._unsubscribeClientSubscription(clientSubscriptionId,"signature result")}_wsOnRootNotification(notification){let{result,subscription}=(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Ue)(notification,RootNotificationResult);this._handleServerNotification(subscription,[result])}onRootChange(callback){return this._makeSubscription({callback,method:"rootSubscribe",unsubscribeMethod:"rootUnsubscribe"},[])}async removeRootChangeListener(clientSubscriptionId){await this._unsubscribeClientSubscription(clientSubscriptionId,"root change")}}class Keypair{constructor(keypair){this._keypair=void 0,this._keypair=null!=keypair?keypair:generateKeypair()}static generate(){return new Keypair(generateKeypair())}static fromSecretKey(secretKey,options){if(64!==secretKey.byteLength)throw Error("bad secret key size");let publicKey=secretKey.slice(32,64);if(!options||!options.skipValidation){let privateScalar=secretKey.slice(0,32),computedPublicKey=getPublicKey(privateScalar);for(let ii=0;ii<32;ii++)if(publicKey[ii]!==computedPublicKey[ii])throw Error("provided secretKey is invalid")}return new Keypair({publicKey,secretKey})}static fromSeed(seed){let publicKey=getPublicKey(seed),secretKey=new Uint8Array(64);return secretKey.set(seed),secretKey.set(publicKey,32),new Keypair({publicKey,secretKey})}get publicKey(){return new PublicKey(this._keypair.publicKey)}get secretKey(){return new Uint8Array(this._keypair.secretKey)}}Object.freeze({CreateLookupTable:{index:0,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),u64("recentSlot"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("bumpSeed")])},FreezeLookupTable:{index:1,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])},ExtendLookupTable:{index:2,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),u64(),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(publicKey(),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.cv(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq(),-8),"addresses")])},DeactivateLookupTable:{index:3,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])},CloseLookupTable:{index:4,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])}}),new PublicKey("AddressLookupTab1e1111111111111111111111111"),Object.freeze({RequestUnits:{index:0,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("units"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("additionalFee")])},RequestHeapFrame:{index:1,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("bytes")])},SetComputeUnitLimit:{index:2,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("units")])},SetComputeUnitPrice:{index:3,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("instruction"),u64("microLamports")])}}),new PublicKey("ComputeBudget111111111111111111111111111111");let ED25519_INSTRUCTION_LAYOUT=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("numSignatures"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("padding"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("signatureOffset"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("signatureInstructionIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("publicKeyOffset"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("publicKeyInstructionIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("messageDataOffset"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("messageDataSize"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("messageInstructionIndex")]);class Ed25519Program{constructor(){}static createInstructionWithPublicKey(params){let{publicKey,message,signature,instructionIndex}=params;assert(32===publicKey.length,`Public Key must be 32 bytes but received ${publicKey.length} bytes`),assert(64===signature.length,`Signature must be 64 bytes but received ${signature.length} bytes`);let publicKeyOffset=ED25519_INSTRUCTION_LAYOUT.span,signatureOffset=publicKeyOffset+publicKey.length,messageDataOffset=signatureOffset+signature.length,instructionData=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(messageDataOffset+message.length),index=null==instructionIndex?65535:instructionIndex;return ED25519_INSTRUCTION_LAYOUT.encode({numSignatures:1,padding:0,signatureOffset,signatureInstructionIndex:index,publicKeyOffset,publicKeyInstructionIndex:index,messageDataOffset,messageDataSize:message.length,messageInstructionIndex:index},instructionData),instructionData.fill(publicKey,publicKeyOffset),instructionData.fill(signature,signatureOffset),instructionData.fill(message,messageDataOffset),new TransactionInstruction({keys:[],programId:Ed25519Program.programId,data:instructionData})}static createInstructionWithPrivateKey(params){let{privateKey,message,instructionIndex}=params;assert(64===privateKey.length,`Private key must be 64 bytes but received ${privateKey.length} bytes`);try{let keypair=Keypair.fromSecretKey(privateKey),publicKey=keypair.publicKey.toBytes(),signature=sign(message,keypair.secretKey);return this.createInstructionWithPublicKey({publicKey,message,signature,instructionIndex})}catch(error){throw Error(`Error creating instruction; ${error}`)}}}Ed25519Program.programId=new PublicKey("Ed25519SigVerify111111111111111111111111111"),_noble_secp256k1__WEBPACK_IMPORTED_MODULE_13__.P6.hmacSha256Sync=(key,...msgs)=>{let h=_noble_hashes_hmac__WEBPACK_IMPORTED_MODULE_12__.b.create(_noble_hashes_sha256__WEBPACK_IMPORTED_MODULE_5__.J,key);return msgs.forEach(msg=>h.update(msg)),h.digest()};let ecdsaSign=(msgHash,privKey)=>_noble_secp256k1__WEBPACK_IMPORTED_MODULE_13__.kS(msgHash,privKey,{der:!1,recovered:!0});_noble_secp256k1__WEBPACK_IMPORTED_MODULE_13__.P6.isValidPrivateKey;let publicKeyCreate=_noble_secp256k1__WEBPACK_IMPORTED_MODULE_13__.$3,SECP256K1_INSTRUCTION_LAYOUT=_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("numSignatures"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("signatureOffset"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("signatureInstructionIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("ethAddressOffset"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("ethAddressInstructionIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("messageDataOffset"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.KB("messageDataSize"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("messageInstructionIndex"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(20,"ethAddress"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Ik(64,"signature"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("recoveryId")]);class Secp256k1Program{constructor(){}static publicKeyToEthAddress(publicKey){assert(64===publicKey.length,`Public key must be 64 bytes but received ${publicKey.length} bytes`);try{return buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_11__.fr)(toBuffer(publicKey))).slice(-20)}catch(error){throw Error(`Error constructing Ethereum address: ${error}`)}}static createInstructionWithPublicKey(params){let{publicKey,message,signature,recoveryId,instructionIndex}=params;return Secp256k1Program.createInstructionWithEthAddress({ethAddress:Secp256k1Program.publicKeyToEthAddress(publicKey),message,signature,recoveryId,instructionIndex})}static createInstructionWithEthAddress(params){let ethAddress;let{ethAddress:rawAddress,message,signature,recoveryId,instructionIndex=0}=params;assert(20===(ethAddress="string"==typeof rawAddress?rawAddress.startsWith("0x")?buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(rawAddress.substr(2),"hex"):buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from(rawAddress,"hex"):rawAddress).length,`Address must be 20 bytes but received ${ethAddress.length} bytes`);let signatureOffset=12+ethAddress.length,messageDataOffset=signatureOffset+signature.length+1,instructionData=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.alloc(SECP256K1_INSTRUCTION_LAYOUT.span+message.length);return SECP256K1_INSTRUCTION_LAYOUT.encode({numSignatures:1,signatureOffset,signatureInstructionIndex:instructionIndex,ethAddressOffset:12,ethAddressInstructionIndex:instructionIndex,messageDataOffset,messageDataSize:message.length,messageInstructionIndex:instructionIndex,signature:toBuffer(signature),ethAddress:toBuffer(ethAddress),recoveryId},instructionData),instructionData.fill(toBuffer(message),SECP256K1_INSTRUCTION_LAYOUT.span),new TransactionInstruction({keys:[],programId:Secp256k1Program.programId,data:instructionData})}static createInstructionWithPrivateKey(params){let{privateKey:pkey,message,instructionIndex}=params;assert(32===pkey.length,`Private key must be 32 bytes but received ${pkey.length} bytes`);try{let privateKey=toBuffer(pkey),publicKey=publicKeyCreate(privateKey,!1).slice(1),messageHash=buffer__WEBPACK_IMPORTED_MODULE_0__.Buffer.from((0,_noble_hashes_sha3__WEBPACK_IMPORTED_MODULE_11__.fr)(toBuffer(message))),[signature,recoveryId]=ecdsaSign(messageHash,privateKey);return this.createInstructionWithPublicKey({publicKey,message,signature,recoveryId,instructionIndex})}catch(error){throw Error(`Error creating instruction; ${error}`)}}}Secp256k1Program.programId=new PublicKey("KeccakSecp256k11111111111111111111111111111");let STAKE_CONFIG_ID=new PublicKey("StakeConfig11111111111111111111111111111111");class Lockup{constructor(unixTimestamp,epoch,custodian){this.unixTimestamp=void 0,this.epoch=void 0,this.custodian=void 0,this.unixTimestamp=unixTimestamp,this.epoch=epoch,this.custodian=custodian}}Lockup.default=new Lockup(0,0,PublicKey.default);let STAKE_INSTRUCTION_LAYOUTS=Object.freeze({Initialize:{index:0,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),((property="authorized")=>_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([publicKey("staker"),publicKey("withdrawer")],property))(),((property="lockup")=>_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("unixTimestamp"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("epoch"),publicKey("custodian")],property))()])},Authorize:{index:1,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("newAuthorized"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("stakeAuthorizationType")])},Delegate:{index:2,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])},Split:{index:3,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("lamports")])},Withdraw:{index:4,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("lamports")])},Deactivate:{index:5,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])},Merge:{index:7,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction")])},AuthorizeWithSeed:{index:8,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("newAuthorized"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("stakeAuthorizationType"),rustString("authoritySeed"),publicKey("authorityOwner")])}});Object.freeze({Staker:{index:0},Withdrawer:{index:1}});class StakeProgram{constructor(){}static initialize(params){let{stakePubkey,authorized,lockup:maybeLockup}=params,lockup=maybeLockup||Lockup.default,type=STAKE_INSTRUCTION_LAYOUTS.Initialize,data=encodeData(type,{authorized:{staker:toBuffer(authorized.staker.toBuffer()),withdrawer:toBuffer(authorized.withdrawer.toBuffer())},lockup:{unixTimestamp:lockup.unixTimestamp,epoch:lockup.epoch,custodian:toBuffer(lockup.custodian.toBuffer())}}),instructionData={keys:[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1}],programId:this.programId,data};return new TransactionInstruction(instructionData)}static createAccountWithSeed(params){let transaction=new Transaction;transaction.add(SystemProgram.createAccountWithSeed({fromPubkey:params.fromPubkey,newAccountPubkey:params.stakePubkey,basePubkey:params.basePubkey,seed:params.seed,lamports:params.lamports,space:this.space,programId:this.programId}));let{stakePubkey,authorized,lockup}=params;return transaction.add(this.initialize({stakePubkey,authorized,lockup}))}static createAccount(params){let transaction=new Transaction;transaction.add(SystemProgram.createAccount({fromPubkey:params.fromPubkey,newAccountPubkey:params.stakePubkey,lamports:params.lamports,space:this.space,programId:this.programId}));let{stakePubkey,authorized,lockup}=params;return transaction.add(this.initialize({stakePubkey,authorized,lockup}))}static delegate(params){let{stakePubkey,authorizedPubkey,votePubkey}=params,type=STAKE_INSTRUCTION_LAYOUTS.Delegate,data=encodeData(type);return new Transaction().add({keys:[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:votePubkey,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_STAKE_HISTORY_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:STAKE_CONFIG_ID,isSigner:!1,isWritable:!1},{pubkey:authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static authorize(params){let{stakePubkey,authorizedPubkey,newAuthorizedPubkey,stakeAuthorizationType,custodianPubkey}=params,type=STAKE_INSTRUCTION_LAYOUTS.Authorize,data=encodeData(type,{newAuthorized:toBuffer(newAuthorizedPubkey.toBuffer()),stakeAuthorizationType:stakeAuthorizationType.index}),keys=[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!0},{pubkey:authorizedPubkey,isSigner:!0,isWritable:!1}];return custodianPubkey&&keys.push({pubkey:custodianPubkey,isSigner:!1,isWritable:!1}),new Transaction().add({keys,programId:this.programId,data})}static authorizeWithSeed(params){let{stakePubkey,authorityBase,authoritySeed,authorityOwner,newAuthorizedPubkey,stakeAuthorizationType,custodianPubkey}=params,type=STAKE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,data=encodeData(type,{newAuthorized:toBuffer(newAuthorizedPubkey.toBuffer()),stakeAuthorizationType:stakeAuthorizationType.index,authoritySeed:authoritySeed,authorityOwner:toBuffer(authorityOwner.toBuffer())}),keys=[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:authorityBase,isSigner:!0,isWritable:!1},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1}];return custodianPubkey&&keys.push({pubkey:custodianPubkey,isSigner:!1,isWritable:!1}),new Transaction().add({keys,programId:this.programId,data})}static splitInstruction(params){let{stakePubkey,authorizedPubkey,splitStakePubkey,lamports}=params,type=STAKE_INSTRUCTION_LAYOUTS.Split,data=encodeData(type,{lamports});return new TransactionInstruction({keys:[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:splitStakePubkey,isSigner:!1,isWritable:!0},{pubkey:authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static split(params){let transaction=new Transaction;return transaction.add(SystemProgram.createAccount({fromPubkey:params.authorizedPubkey,newAccountPubkey:params.splitStakePubkey,lamports:0,space:this.space,programId:this.programId})),transaction.add(this.splitInstruction(params))}static splitWithSeed(params){let{stakePubkey,authorizedPubkey,splitStakePubkey,basePubkey,seed,lamports}=params,transaction=new Transaction;return transaction.add(SystemProgram.allocate({accountPubkey:splitStakePubkey,basePubkey,seed,space:this.space,programId:this.programId})),transaction.add(this.splitInstruction({stakePubkey,authorizedPubkey,splitStakePubkey,lamports}))}static merge(params){let{stakePubkey,sourceStakePubKey,authorizedPubkey}=params,type=STAKE_INSTRUCTION_LAYOUTS.Merge,data=encodeData(type);return new Transaction().add({keys:[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:sourceStakePubKey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_STAKE_HISTORY_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static withdraw(params){let{stakePubkey,authorizedPubkey,toPubkey,lamports,custodianPubkey}=params,type=STAKE_INSTRUCTION_LAYOUTS.Withdraw,data=encodeData(type,{lamports}),keys=[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:toPubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_STAKE_HISTORY_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:authorizedPubkey,isSigner:!0,isWritable:!1}];return custodianPubkey&&keys.push({pubkey:custodianPubkey,isSigner:!1,isWritable:!1}),new Transaction().add({keys,programId:this.programId,data})}static deactivate(params){let{stakePubkey,authorizedPubkey}=params,type=STAKE_INSTRUCTION_LAYOUTS.Deactivate,data=encodeData(type);return new Transaction().add({keys:[{pubkey:stakePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}}StakeProgram.programId=new PublicKey("Stake11111111111111111111111111111111111111"),StakeProgram.space=200;let VOTE_INSTRUCTION_LAYOUTS=Object.freeze({InitializeAccount:{index:0,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),((property="voteInit")=>_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([publicKey("nodePubkey"),publicKey("authorizedVoter"),publicKey("authorizedWithdrawer"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("commission")],property))()])},Authorize:{index:1,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),publicKey("newAuthorized"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("voteAuthorizationType")])},Withdraw:{index:3,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.gM("lamports")])},AuthorizeWithSeed:{index:10,layout:_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("instruction"),((property="voteAuthorizeWithSeedArgs")=>_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("voteAuthorizationType"),publicKey("currentAuthorityDerivedKeyOwnerPubkey"),rustString("currentAuthorityDerivedKeySeed"),publicKey("newAuthorized")],property))()])}});Object.freeze({Voter:{index:0},Withdrawer:{index:1}});class VoteProgram{constructor(){}static initializeAccount(params){let{votePubkey,nodePubkey,voteInit}=params,type=VOTE_INSTRUCTION_LAYOUTS.InitializeAccount,data=encodeData(type,{voteInit:{nodePubkey:toBuffer(voteInit.nodePubkey.toBuffer()),authorizedVoter:toBuffer(voteInit.authorizedVoter.toBuffer()),authorizedWithdrawer:toBuffer(voteInit.authorizedWithdrawer.toBuffer()),commission:voteInit.commission}}),instructionData={keys:[{pubkey:votePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_RENT_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:nodePubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data};return new TransactionInstruction(instructionData)}static createAccount(params){let transaction=new Transaction;return transaction.add(SystemProgram.createAccount({fromPubkey:params.fromPubkey,newAccountPubkey:params.votePubkey,lamports:params.lamports,space:this.space,programId:this.programId})),transaction.add(this.initializeAccount({votePubkey:params.votePubkey,nodePubkey:params.voteInit.nodePubkey,voteInit:params.voteInit}))}static authorize(params){let{votePubkey,authorizedPubkey,newAuthorizedPubkey,voteAuthorizationType}=params,type=VOTE_INSTRUCTION_LAYOUTS.Authorize,data=encodeData(type,{newAuthorized:toBuffer(newAuthorizedPubkey.toBuffer()),voteAuthorizationType:voteAuthorizationType.index});return new Transaction().add({keys:[{pubkey:votePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:authorizedPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static authorizeWithSeed(params){let{currentAuthorityDerivedKeyBasePubkey,currentAuthorityDerivedKeyOwnerPubkey,currentAuthorityDerivedKeySeed,newAuthorizedPubkey,voteAuthorizationType,votePubkey}=params,type=VOTE_INSTRUCTION_LAYOUTS.AuthorizeWithSeed,data=encodeData(type,{voteAuthorizeWithSeedArgs:{currentAuthorityDerivedKeyOwnerPubkey:toBuffer(currentAuthorityDerivedKeyOwnerPubkey.toBuffer()),currentAuthorityDerivedKeySeed:currentAuthorityDerivedKeySeed,newAuthorized:toBuffer(newAuthorizedPubkey.toBuffer()),voteAuthorizationType:voteAuthorizationType.index}});return new Transaction().add({keys:[{pubkey:votePubkey,isSigner:!1,isWritable:!0},{pubkey:SYSVAR_CLOCK_PUBKEY,isSigner:!1,isWritable:!1},{pubkey:currentAuthorityDerivedKeyBasePubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static withdraw(params){let{votePubkey,authorizedWithdrawerPubkey,lamports,toPubkey}=params,type=VOTE_INSTRUCTION_LAYOUTS.Withdraw,data=encodeData(type,{lamports});return new Transaction().add({keys:[{pubkey:votePubkey,isSigner:!1,isWritable:!0},{pubkey:toPubkey,isSigner:!1,isWritable:!0},{pubkey:authorizedWithdrawerPubkey,isSigner:!0,isWritable:!1}],programId:this.programId,data})}static safeWithdraw(params,currentVoteAccountBalance,rentExemptMinimum){if(params.lamports>currentVoteAccountBalance-rentExemptMinimum)throw Error("Withdraw will leave vote account with insuffcient funds.");return VoteProgram.withdraw(params)}}VoteProgram.programId=new PublicKey("Vote111111111111111111111111111111111111111"),VoteProgram.space=3731,new PublicKey("Va1idator1nfo111111111111111111111111111111"),(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.dt)({name:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)(),website:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),details:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)()),keybaseUsername:(0,superstruct__WEBPACK_IMPORTED_MODULE_14__.jt)((0,superstruct__WEBPACK_IMPORTED_MODULE_14__.Z_)())}),new PublicKey("Vote111111111111111111111111111111111111111"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([publicKey("nodePubkey"),publicKey("authorizedWithdrawer"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("commission"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O(),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("slot"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq("confirmationCount")]),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.cv(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq(),-8),"votes"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("rootSlotValid"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("rootSlot"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O(),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("epoch"),publicKey("authorizedVoter")]),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.cv(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq(),-8),"authorizedVoters"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([publicKey("authorizedPubkey"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("epochOfLastAuthorizedSwitch"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("targetEpoch")]),32,"buf"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("idx"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.u8("isEmpty")],"priorVoters"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O(),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.A9(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("epoch"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("credits"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("prevCredits")]),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.cv(_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.Jq(),-8),"epochCredits"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__.n_([_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("slot"),_solana_buffer_layout__WEBPACK_IMPORTED_MODULE_7__._O("timestamp")],"lastTimestamp")])}}]);